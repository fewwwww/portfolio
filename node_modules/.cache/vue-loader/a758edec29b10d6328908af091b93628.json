{"remainingRequest":"/Users/msfew/portfolio/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/msfew/portfolio/src/templates/blog/subpages/post/Post.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/msfew/portfolio/src/templates/blog/subpages/post/Post.vue","mtime":1615281667340},{"path":"/Users/msfew/portfolio/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/msfew/portfolio/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/msfew/portfolio/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBwcmlzbSBmcm9tICdwcmlzbWpzJwppbXBvcnQgeyBtYXBBY3Rpb25zLCBtYXBHZXR0ZXJzIH0gZnJvbSAndnVleCcKCmltcG9ydCBTcGlubmVyIGZyb20gJ0AvY29tcG9uZW50cy9ibG9nL3NwaW5uZXIvU3Bpbm5lcicKaW1wb3J0IE1ldGFkYXRhIGZyb20gJ0AvY29tcG9uZW50cy9ibG9nL21ldGFkYXRhL01ldGFkYXRhJwoKaW1wb3J0IGRlc2NyaXB0aW9ucyBmcm9tICdAL2RhdGEvZGVzY3JpcHRpb25zLmpzb24nCgovKioKICogVGhpcyBpcyBvbmUgYmxvZyBwb3N0LiBJdCBjb250YWlucyB0aGUgY29tcGxldGUgY29udGVudCBmcm9tIHRoZSBwb3N0LgogKi8KZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdQb3N0JywKICBtZXRhSW5mbyAoKSB7CiAgICBjb25zdCBwb3N0ID0gdGhpcy5wb3N0CiAgICByZXR1cm4gewogICAgICB0aXRsZTogcG9zdCA/IHBvc3QudGl0bGUgOiAnQmxvZyBwb3N0JywKICAgICAgbWV0YTogWydkZXNjcmlwdGlvbicsICdvZzpkZXNjcmlwdGlvbiddLm1hcChuYW1lID0+ICh7CiAgICAgICAgbmFtZSwKICAgICAgICBjb250ZW50OiBkZXNjcmlwdGlvbnMuYmxvZwogICAgICB9KSkKICAgIH0KICB9LAogIGNvbXBvbmVudHM6IHsKICAgIFNwaW5uZXIsCiAgICBNZXRhZGF0YQogIH0sCiAgcHJvcHM6IHsKICAgIC8qKgogICAgICogX3RoZSBzbHVnIG9mIHRoZSBwb3N0IHRvIGRpc3BsYXlfCiAgICAgKi8KICAgIHNsdWc6IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICByZXF1aXJlZDogdHJ1ZQogICAgfQogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIHBvc3QgKCkgewogICAgICByZXR1cm4gdGhpcy5jb250ZW50V2l0aFNsdWcodGhpcy5zbHVnKQogICAgfSwKCiAgICAuLi5tYXBHZXR0ZXJzKCdibG9nJywgWwogICAgICAnY29udGVudFdpdGhTbHVnJwogICAgXSkKICB9LAogIHdhdGNoOiB7CiAgICAvKioKICAgICAqIFJlbG9hZCB0aGUgcGFnZSBhbmQgdGhlIHBvc3QgY29udGVudCB3aGVuIHRoZSBzbHVnIGNoYW5nZXMuCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdG8gLSB0aGUgbmV3IHZhbHVlIG9mIHRoZSBzbHVnCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZnJvbSAtIHRoZSBvbGQgdmFsdWUgb2YgdGhlIHNsdWcKICAgICAqLwogICAgJyRyb3V0ZS5wYXJhbXMuc2x1Zyc6IGZ1bmN0aW9uICh0bywgZnJvbSkgewogICAgICBpZiAodG8gIT09IGZyb20pIHsgLy8gTm8gbmVlZCB0byByZWxvYWQgaWYgbm90aGluZyBjaGFuZ2VzCiAgICAgICAgLy8gRmV0Y2ggbmV3IGNvbnRlbnQgZnJvbSB0aGUgQVBJCiAgICAgICAgdGhpcy5sb2FkQ29udGVudCgpCiAgICAgIH0KICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIC8qKgogICAgICogU3BsaXQgYWxsIGhlYWRpbmdzIGF0IHRoZSBpbmRpY2VzIGFuZCBjb2xvciBhbGwgaW5kaWNlcyBpbiBhIHNsaWdodGx5CiAgICAgKiBtdXRlZCBjb2xvci4KICAgICAqLwogICAgc3BsaXRIZWFkaW5ncyAoKSB7CiAgICAgIGlmICh0aGlzLiRyZWZzLmNvbnRlbnQpIHsKICAgICAgICBjb25zdCBoZWFkaW5ncyA9IHRoaXMuJHJlZnMuY29udGVudC5xdWVyeVNlbGVjdG9yQWxsKCdoMiwgaDMsIGg0LCBoNSwgaDYnKQogICAgICAgIGhlYWRpbmdzLmZvckVhY2goaGVhZGluZyA9PiB7CiAgICAgICAgICBjb25zdCB0ZXh0ID0gaGVhZGluZy5pbm5lclRleHQKICAgICAgICAgIGNvbnN0IGh0bWwgPSB0ZXh0LnJlcGxhY2UoCiAgICAgICAgICAgIC9eKFtcZC5dKykvLAogICAgICAgICAgICAnPHNwYW4gY2xhc3M9ImluZGV4Ij7CpyQxPC9zcGFuPicKICAgICAgICAgICkKICAgICAgICAgIGhlYWRpbmcuaW5uZXJIVE1MID0gaHRtbAogICAgICAgIH0pCiAgICAgIH0KICAgIH0sCiAgICAvKioKICAgICAqIEhpZ2hsaWdodCBjb2RlIHNuaXBwZXRzIHVzaW5nIFByaXNtLgogICAgICovCiAgICBoaWdobGlnaHRDb2RlICgpIHsKICAgICAgcHJpc20uaGlnaGxpZ2h0QWxsKCkKICAgIH0sCgogICAgLyoqCiAgICAgKiBQZXJmb3JtIHByb2Nlc3NpbmcgdG8gYmUgZG9uZSBiZWZvcmUgdGhlIGNvbnRlbnQgaXMgc2hvd24uCiAgICAgKi8KICAgIHBlcmZvcm1QcmVQcm9jZXNzaW5nICgpIHsKICAgICAgdGhpcy5zcGxpdEhlYWRpbmdzKCkKICAgIH0sCiAgICAvKioKICAgICAqIFBlcmZvcm0gcHJvY2Vzc2luZyB0byBiZSBkb25lIGFmdGVyIHRoZSBjb250ZW50IGlzIHNob3duLgogICAgICovCiAgICBwZXJmb3JtUG9zdFByb2Nlc3NpbmcgKCkgewogICAgICB0aGlzLmhpZ2hsaWdodENvZGUoKQogICAgfSwKCiAgICAvKioKICAgICAqIEhpdCB0aGUgc2VydmVybGVzcyBBUEkgZm9yIHRoZSBwb3J0Zm9saW8gYW5kIGdldCB0aGUgSFRNTCBjb250ZW50IG9mCiAgICAgKiB0aGUgYmxvZy4gVGhpcyBIVE1MIGlzIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGJ5IFdyaXRlLmFzIGZyb20gdGhlCiAgICAgKiBNYXJrZG93biBjb250ZW50IG9mIHRoZSBwb3N0LgogICAgICovCiAgICBsb2FkQ29udGVudCAoKSB7CiAgICAgIGlmICghdGhpcy5jb250ZW50V2l0aFNsdWcodGhpcy5zbHVnKSkgewogICAgICAgIHRoaXMuZmV0Y2hDb250ZW50KHsKICAgICAgICAgIHNsdWc6IHRoaXMuc2x1ZwogICAgICAgIH0pCiAgICAgIH0KICAgIH0sCgogICAgLi4ubWFwQWN0aW9ucygnYmxvZycsIFsKICAgICAgJ2ZldGNoQ29udGVudCcKICAgIF0pCiAgfSwKICBtb3VudGVkICgpIHsKICAgIHRoaXMubG9hZENvbnRlbnQoKQogIH0KfQo="},{"version":3,"sources":["Post.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Post.vue","sourceRoot":"src/templates/blog/subpages/post","sourcesContent":["<template>\n  <div id=\"blog--post\">\n    <transition\n      name=\"fade\"\n      mode=\"out-in\"\n      appear\n      @before-enter=\"performPreProcessing\"\n      @after-enter=\"performPostProcessing\">\n      <section\n        v-if=\"post\"\n        key=\"loaded\">\n        <div class=\"body\">\n          <div class=\"heading\">\n            <!-- Typography sizes in blog posts are off by one... -->\n            <h1 class=\"blue-colored\">{{ post.title }}</h1>\n            <!-- ...so this h1 looks like an h2 -->\n            <Metadata\n              :absolute-date=\"post.publicationDate.absolute\"\n              :relative-date=\"post.publicationDate.relative\"\n              :tags=\"post.tags\"/>\n          </div>\n\n          <div class=\"content\" v-html=\"post.body\" ref=\"content\"></div>\n\n          <p class=\"footer secondary-colored\">\n            Permalink to <a :href=\"post.portfolioUrl\">this post</a>.\n          </p>\n        </div>\n      </section>\n\n      <section\n        v-else\n        key=\"loading\"\n        class=\"centered\">\n        <Spinner/>\n      </section>\n    </transition>\n  </div>\n</template>\n\n<script>\n  import prism from 'prismjs'\n  import { mapActions, mapGetters } from 'vuex'\n\n  import Spinner from '@/components/blog/spinner/Spinner'\n  import Metadata from '@/components/blog/metadata/Metadata'\n\n  import descriptions from '@/data/descriptions.json'\n\n  /**\n   * This is one blog post. It contains the complete content from the post.\n   */\n  export default {\n    name: 'Post',\n    metaInfo () {\n      const post = this.post\n      return {\n        title: post ? post.title : 'Blog post',\n        meta: ['description', 'og:description'].map(name => ({\n          name,\n          content: descriptions.blog\n        }))\n      }\n    },\n    components: {\n      Spinner,\n      Metadata\n    },\n    props: {\n      /**\n       * _the slug of the post to display_\n       */\n      slug: {\n        type: String,\n        required: true\n      }\n    },\n    computed: {\n      post () {\n        return this.contentWithSlug(this.slug)\n      },\n\n      ...mapGetters('blog', [\n        'contentWithSlug'\n      ])\n    },\n    watch: {\n      /**\n       * Reload the page and the post content when the slug changes.\n       * @param {string} to - the new value of the slug\n       * @param {string} from - the old value of the slug\n       */\n      '$route.params.slug': function (to, from) {\n        if (to !== from) { // No need to reload if nothing changes\n          // Fetch new content from the API\n          this.loadContent()\n        }\n      }\n    },\n    methods: {\n      /**\n       * Split all headings at the indices and color all indices in a slightly\n       * muted color.\n       */\n      splitHeadings () {\n        if (this.$refs.content) {\n          const headings = this.$refs.content.querySelectorAll('h2, h3, h4, h5, h6')\n          headings.forEach(heading => {\n            const text = heading.innerText\n            const html = text.replace(\n              /^([\\d.]+)/,\n              '<span class=\"index\">ยง$1</span>'\n            )\n            heading.innerHTML = html\n          })\n        }\n      },\n      /**\n       * Highlight code snippets using Prism.\n       */\n      highlightCode () {\n        prism.highlightAll()\n      },\n\n      /**\n       * Perform processing to be done before the content is shown.\n       */\n      performPreProcessing () {\n        this.splitHeadings()\n      },\n      /**\n       * Perform processing to be done after the content is shown.\n       */\n      performPostProcessing () {\n        this.highlightCode()\n      },\n\n      /**\n       * Hit the serverless API for the portfolio and get the HTML content of\n       * the blog. This HTML is automatically generated by Write.as from the\n       * Markdown content of the post.\n       */\n      loadContent () {\n        if (!this.contentWithSlug(this.slug)) {\n          this.fetchContent({\n            slug: this.slug\n          })\n        }\n      },\n\n      ...mapActions('blog', [\n        'fetchContent'\n      ])\n    },\n    mounted () {\n      this.loadContent()\n    }\n  }\n</script>\n\n<style scoped lang=\"scss\" src=\"./Post.scss\"/>\n"]}]}