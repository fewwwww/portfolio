{"remainingRequest":"/Users/msfew/portfolio/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/msfew/portfolio/src/templates/portfolio/commands/Concatenate.vue?vue&type=style&index=0&id=63b9a67d&scoped=true&lang=scss&","dependencies":[{"path":"/Users/msfew/portfolio/src/templates/portfolio/commands/Concatenate.vue","mtime":1615276825508},{"path":"/Users/msfew/portfolio/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/msfew/portfolio/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/msfew/portfolio/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/msfew/portfolio/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/msfew/portfolio/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/msfew/portfolio/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmNhdCB7CiAgOjp2LWRlZXAgewogICAgQGltcG9ydCAnfkAvc3R5bGVzL3V0aWxzL3ByaXNtJzsKICB9Cn0K"},{"version":3,"sources":["Concatenate.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkKA;AACA;AACA;AACA;AACA","file":"Concatenate.vue","sourceRoot":"src/templates/portfolio/commands","sourcesContent":["<template>\n  <div class=\"cat\">\n    <template v-if=\"isFound\">\n      <div v-if=\"contents\" v-html=\"contents\"/>\n      <span\n        v-else\n        class=\"magenta-colored\">\n        <Spinner/>\n        Loadingâ€¦\n      </span>\n    </template>\n\n    <template v-else>\n      <strong>{{ args.filename }}</strong> is not a valid file.\n    </template>\n  </div>\n</template>\n\n<script>\n  import axios from 'axios'\n  import prism from 'prismjs'\n\n  import { mapGetters, mapMutations } from 'vuex'\n\n  import Spinner from '@/components/portfolio/spinner/Spinner'\n  import Link from '@/components/portfolio/link/Link'\n\n  import argumented from '@/mixins/argumented'\n\n  import '@/styles/utils/prism.scss'\n\n  /**\n   * This command prints the contents of a file 'filename'.\n   */\n  export default {\n    name: 'Concatenate',\n    mixins: [\n      argumented\n    ],\n    components: {\n      Spinner,\n      // eslint-disable-next-line vue/no-unused-components\n      Link\n    },\n    argSpec: {\n      args: [\n        {\n          name: 'filename',\n          type: String,\n          default: 'VANITY'\n        }\n      ],\n      kwargs: []\n    },\n    props: {\n      /**\n       * _the arguments passed to the command_\n       */\n      argv: {\n        type: Array\n      }\n    },\n    data () {\n      return {\n        contents: null\n      }\n    },\n    computed: {\n      /**\n       * _the file whose contents must be displayed_\n       */\n      file () {\n        if (this.args.filename === 'VANITY' || this.args.filename === 'E') {\n          return null\n        } else {\n          return this.nodeLocatedAt(this.args.filename)\n        }\n      },\n      /**\n       * _whether a file matching the path was found_\n       */\n      isFound () {\n        return this.args.filename === 'VANITY' ||\n          this.args.filename === 'E' ||\n          (this.node && this.node.isFile())\n      },\n      /**\n       * _the imported HTML of the file_\n       */\n      path () {\n        let filePath\n        if (this.args.filename === 'VANITY') {\n          filePath = 'vanity_card.content.html'\n        } else if (this.args.filename === 'E') {\n          filePath = 'e.content.html'\n        } else {\n          const dirName = this.node.parent.name\n          const fileName = this.node.name\n          filePath = `${dirName}/${fileName}.content.html`\n        }\n        return require(`@/assets/content/${filePath}`)\n      },\n\n      ...mapGetters('portfolio', [\n        'nodeLocatedAt'\n      ])\n    },\n    methods: {\n      stopProcessing (state) {\n        if (state === 'FAIL') {\n          this.contents = '<div>An unexpected error occurred.</div>'\n        }\n        this.setIsProcessing({\n          isProcessing: false\n        })\n      },\n      loadContent () {\n        try {\n          const path = this.path\n          axios\n            .get(path, {\n              responseType: 'text'\n            })\n            .then(response => {\n              setTimeout(() => {\n                this.contents = response.data\n\n                this.$nextTick(this.formatOutput)\n              }, 1000)\n            })\n            .catch(err => {\n              console.log('FAIL')\n              console.error(err)\n              this.stopProcessing('FAIL')\n            })\n        } catch (error) {\n          this.stopProcessing('FAIL')\n        }\n      },\n      formatOutput () {\n        prism.highlightAll()\n        this.stopProcessing('PASS')\n      },\n\n      ...mapMutations('portfolio', [\n        'setIsProcessing'\n      ])\n    },\n    created () {\n      this.node = this.file\n    },\n    mounted () {\n      if (this.isFound) {\n        this.loadContent()\n      } else {\n        this.stopProcessing('FAIL')\n      }\n    }\n  }\n</script>\n\n<style scoped lang=\"scss\">\n  .cat {\n    ::v-deep {\n      @import '~@/styles/utils/prism';\n    }\n  }\n</style>\n"]}]}