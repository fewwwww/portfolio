{"remainingRequest":"/Users/msfew/portfolio/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/msfew/portfolio/src/templates/portfolio/commands/Tree.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/msfew/portfolio/src/templates/portfolio/commands/Tree.vue","mtime":1617939276000},{"path":"/Users/msfew/portfolio/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/msfew/portfolio/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/msfew/portfolio/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IG1hcEdldHRlcnMsIG1hcFN0YXRlIH0gZnJvbSAndnVleCcKCmltcG9ydCBMaW5rIGZyb20gJ0AvY29tcG9uZW50cy9wb3J0Zm9saW8vbGluay9MaW5rJwoKaW1wb3J0IGFyZ3VtZW50ZWQgZnJvbSAnQC9taXhpbnMvYXJndW1lbnRlZCcKCi8qKgogKiBUaGlzIGNvbW1hbmQgcmVjdXJzaXZlbHkgbGlzdHMgYWxsIGRpcmVjdG9yaWVzIGFuZCB0aGVpciBjb250ZW50cy4KICovCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnVHJlZScsCiAgbWl4aW5zOiBbCiAgICBhcmd1bWVudGVkCiAgXSwKICBjb21wb25lbnRzOiB7CiAgICBMaW5rCiAgfSwKICBhcmdTcGVjOiB7CiAgICBhcmdzOiBbCiAgICAgIHsKICAgICAgICBuYW1lOiAnZGlybmFtZScsCiAgICAgICAgdHlwZTogU3RyaW5nLAogICAgICAgIGRlZmF1bHQ6ICcuJwogICAgICB9CiAgICBdLAogICAga3dhcmdzOiBbCiAgICAgIHsKICAgICAgICBuYW1lOiAnLS1mbGF0dGVuJywKICAgICAgICB0eXBlOiBCb29sZWFuLAogICAgICAgIGFsaWFzZXM6IFsKICAgICAgICAgICctZicKICAgICAgICBdCiAgICAgIH0KICAgIF0KICB9LAogIHByb3BzOiB7CiAgICAvKioKICAgICAqIF90aGUgYXJndW1lbnRzIHBhc3NlZCB0byB0aGUgY29tbWFuZF8KICAgICAqLwogICAgYXJndjogewogICAgICB0eXBlOiBBcnJheQogICAgfSwKICAgIC8qKgogICAgICogX3RoZSBub2RlIGJlbG93IHdoaWNoIHRoZSB0cmVlIGlzIHRvIGJlIHJlbmRlcmVkXwogICAgICovCiAgICBwYXNzZWROb2RlOiB7CiAgICAgIHR5cGU6IE9iamVjdAogICAgfSwKICAgIC8qKgogICAgICogX3RoZSBydWxlcyB0byBkcmF3IGxpbmVzIGJlZm9yZSBldmVyeSBlbGVtZW50IG9mIHRoaXMgdHJlZV8KICAgICAqLwogICAgbGluZVJ1bGVzOiB7CiAgICAgIHR5cGU6IEFycmF5LAogICAgICBkZWZhdWx0OiAoKSA9PiBbXQogICAgfQogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIGxldmVsICgpIHsKICAgICAgcmV0dXJuIHRoaXMubGluZVJ1bGVzLmxlbmd0aAogICAgfSwKICAgIC8qKgogICAgICogX3RoZSBkaXJlY3Rvcnkgd2hvc2UgY29udGVudHMgYXJlIHRvIGJlIHNob3duXwogICAgICovCiAgICBkaXIgKCkgewogICAgICBpZiAodGhpcy5wYXNzZWROb2RlKSB7CiAgICAgICAgcmV0dXJuIHRoaXMucGFzc2VkTm9kZQogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiB0aGlzLm5vZGVMb2NhdGVkQXQodGhpcy5hcmdzLmRpcm5hbWUucmVwbGFjZSgvXC8kLywgJycpKQogICAgICB9CiAgICB9LAogICAgLyoqCiAgICAgKiBfd2hldGhlciBhIG5vZGUgbWF0Y2hpbmcgdGhlIHBhdGggd2FzIGZvdW5kXwogICAgICovCiAgICBpc0ZvdW5kICgpIHsKICAgICAgcmV0dXJuIHRoaXMubm9kZQogICAgfSwKICAgIC8qKgogICAgICogX3doZXRoZXIgdGhpcyBub2RlIGlzIHRoZSBsYXN0IGNoaWxkIG9mIGl0cyBwYXJlbnRfCiAgICAgKi8KICAgIGlzTGFzdENoaWxkICgpIHsKICAgICAgaWYgKHRoaXMubGV2ZWwgPT09IDApIHsgLy8gUm9vdCBub2RlCiAgICAgICAgcmV0dXJuIHRydWUKICAgICAgfSBlbHNlIHsKICAgICAgICBjb25zdCBzaWJsaW5ncyA9IHRoaXMubm9kZS5wYXJlbnQuY2hpbGRyZW4KICAgICAgICByZXR1cm4gc2libGluZ3MuaW5kZXhPZih0aGlzLm5vZGUpID09PSBzaWJsaW5ncy5sZW5ndGggLSAxCiAgICAgIH0KICAgIH0sCgogICAgLi4ubWFwU3RhdGUoJ3BvcnRmb2xpbycsIFsKICAgICAgJ2N1cnJlbnROb2RlJwogICAgXSksCiAgICAuLi5tYXBHZXR0ZXJzKCdwb3J0Zm9saW8nLCBbCiAgICAgICdub2RlTG9jYXRlZEF0JwogICAgXSkKICB9LAogIGNyZWF0ZWQgKCkgewogICAgdGhpcy5ub2RlID0gdGhpcy5kaXIKICB9Cn0K"},{"version":3,"sources":["Tree.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Tree.vue","sourceRoot":"src/templates/portfolio/commands","sourcesContent":["<template>\n  <div class=\"tree\">\n    <template v-if=\"isFound\">\n      <template v-if=\"!args.flatten\">\n        <span\n          :class=\"rule ? 'extra-space' : 'space'\"\n          v-for=\"(rule, index) in lineRules\"\n          :key=\"index\">{{ rule ? '': '│'}}</span>{{ isLastChild ? '└' : '├'}}──&nbsp;\n      </template>\n\n      <template v-if=\"!(args.flatten && node.isFolder())\">\n        <template v-if=\"args.flatten\">─&nbsp;</template>\n        <Link :node=\"node\"/>\n      </template>\n\n      <tree\n        v-for=\"child in node.children\"\n        :argv=\"argv\"\n        :passed-node=\"child\"\n        :line-rules=\"[...lineRules, isLastChild]\"\n        :key=\"child.name\"/>\n    </template>\n    <template v-else>\n      <strong>{{ args.dirname }}</strong> is not a valid directory.\n    </template>\n  </div>\n</template>\n\n<script>\n  import { mapGetters, mapState } from 'vuex'\n\n  import Link from '@/components/portfolio/link/Link'\n\n  import argumented from '@/mixins/argumented'\n\n  /**\n   * This command recursively lists all directories and their contents.\n   */\n  export default {\n    name: 'Tree',\n    mixins: [\n      argumented\n    ],\n    components: {\n      Link\n    },\n    argSpec: {\n      args: [\n        {\n          name: 'dirname',\n          type: String,\n          default: '.'\n        }\n      ],\n      kwargs: [\n        {\n          name: '--flatten',\n          type: Boolean,\n          aliases: [\n            '-f'\n          ]\n        }\n      ]\n    },\n    props: {\n      /**\n       * _the arguments passed to the command_\n       */\n      argv: {\n        type: Array\n      },\n      /**\n       * _the node below which the tree is to be rendered_\n       */\n      passedNode: {\n        type: Object\n      },\n      /**\n       * _the rules to draw lines before every element of this tree_\n       */\n      lineRules: {\n        type: Array,\n        default: () => []\n      }\n    },\n    computed: {\n      level () {\n        return this.lineRules.length\n      },\n      /**\n       * _the directory whose contents are to be shown_\n       */\n      dir () {\n        if (this.passedNode) {\n          return this.passedNode\n        } else {\n          return this.nodeLocatedAt(this.args.dirname.replace(/\\/$/, ''))\n        }\n      },\n      /**\n       * _whether a node matching the path was found_\n       */\n      isFound () {\n        return this.node\n      },\n      /**\n       * _whether this node is the last child of its parent_\n       */\n      isLastChild () {\n        if (this.level === 0) { // Root node\n          return true\n        } else {\n          const siblings = this.node.parent.children\n          return siblings.indexOf(this.node) === siblings.length - 1\n        }\n      },\n\n      ...mapState('portfolio', [\n        'currentNode'\n      ]),\n      ...mapGetters('portfolio', [\n        'nodeLocatedAt'\n      ])\n    },\n    created () {\n      this.node = this.dir\n    }\n  }\n</script>\n\n<style scoped lang=\"scss\">\n  .tree {\n    .space {\n      margin-right: 3ch;\n    }\n\n    .extra-space {\n      margin-right: 4ch;\n    }\n  }\n</style>\n"]}]}