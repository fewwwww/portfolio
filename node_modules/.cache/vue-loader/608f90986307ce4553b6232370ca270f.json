{"remainingRequest":"/Users/msfew/portfolio/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/msfew/portfolio/src/components/layout/grid/pieces/cell/Cell.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/msfew/portfolio/src/components/layout/grid/pieces/cell/Cell.vue","mtime":1615276825500},{"path":"/Users/msfew/portfolio/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/msfew/portfolio/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/msfew/portfolio/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/msfew/portfolio/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KCi8qKgogKiBUaGlzIGNvbXBvbmVudCBpcyBvbmUgY2VsbCBpbiBhIGdyaWQgbGF5b3V0LgogKi8KZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdDZWxsJywgLy8gQWx3YXlzIHVzZSBhcyBHcmlkLkNlbGwKICBwcm9wczogewogICAgLyoqCiAgICAgKiBfdGhlIG51bWJlciBvZiBzbGljZXMgdGhpcyBjb2x1bW4gc2hvdWxkIHNwYW4gb24gZGlmZmVyZW50IGRldmljZXNfCiAgICAgKgogICAgICogTm90ZSB0aGF0IGluIGEgMTItc2xpY2UgZ3JpZCwgdGhlIG51bWJlciBvZiBjb2x1bW5zIHRoYXQgY2FuIGJlCiAgICAgKiBhY2NvbW1vZGF0ZWQgaXMgMTIgLyBzcGFuLgogICAgICoKICAgICAqIE90aGVyIHRoYW4gZGVza3RvcCwgYWxsIHZhbHVlcyBoYXZlIGEgZGVmYXVsdCBhbmQgd2lsbCBiZSByZXNvbHZlZCBhcwogICAgICogZm9sbG93cy4gT24gcGhvbmVzIGFuZCB0YWJsZXRzIGluIHBvcnRyYWl0IG9yaWVudGF0aW9uLCB0aGUgY2VsbAogICAgICogb2NjdXBpZXMgYWxsIHR3ZWx2ZSBzbGljZXMuIFRhYmxldHMgaW4gbGFuZHNjYXBlIG9yaWVudGF0aW9uIGFuZCBiaWcKICAgICAqIGRlc2t0b3BzIGZhbGwgYmFjayB0byB0aGUgc2xpY2VzIGNvbmZpZ3VyZWQgZm9yIHRoZSBzdGFuZGFyZCBkZXNrdG9wLgogICAgICoKICAgICAqIFdpdGggdGhlc2UgZmFsbGJhY2tzIGluIG1pbmQsIGRlcGVuZGluZyBvbiB0aGUgbGVuZ3RoIG9mIHRoZSBhcnJheSwKICAgICAqIHRoZSB2YWx1ZXMgYXJlIGludGVycHJldGVkIGRpZmZlcmVudGx5LgogICAgICoKICAgICAqIFthPWRlc2t0b3BdCiAgICAgKiBpcyBpbnRlcnByZXRlZCBhcyBbMTIsIDEyLCBhLCBhLCBhXQogICAgICoKICAgICAqIFthPXBob25lLCBiPWRlc2t0b3BdCiAgICAgKiBpcyBpbnRlcnByZXRlZCBhcyBbYSBhLCBiLCBiLCBiXQogICAgICoKICAgICAqIFthPXBob25lLCBiPXRhYmxldCwgYz1kZXNrdG9wXQogICAgICogaXMgaW50ZXJwcmV0ZWQgYXMgW2EsIGIsIGIsIGMsIGNdCiAgICAgKgogICAgICogW2E9cGhvbmUsIGI9dGFibGV0LCBjPWRlc2t0b3Atc3RhbmRhcmQsIGQ9ZGVza3RvcC13aWRlXQogICAgICogaXMgaW50ZXJwcmV0ZWQgYXMgW2EsIGIsIGIsIGMsIGRdCiAgICAgKgogICAgICogW2E9cGhvbmUsIGI9dGFibGV0LXBvcnRyYWl0LCBjPXRhYmxldC1sYW5kc2NhcGUsIGQ9ZGVza3RvcC1zdGFuZGFyZCwgZT1kZXNrdG9wLXdpZGVdCiAgICAgKiBpcyBpbnRlcnByZXRlZCBhcyBbYSwgYiwgYywgZCwgZV0KICAgICAqLwogICAgc3BhblNldDogewogICAgICB0eXBlOiBBcnJheSwKICAgICAgcmVxdWlyZWQ6IHRydWUsCiAgICAgIHZhbGlkYXRvcjogdmFsID0+IHZhbC5sZW5ndGggPj0gMSAmJiB2YWwubGVuZ3RoIDw9IDUgJiYgdmFsLmV2ZXJ5KAogICAgICAgIHNwYW4gPT4gc3BhbiA+PSAxICYmIHNwYW4gPD0gMTIKICAgICAgKQogICAgfQogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIC8qKgogICAgICogR2V0IHRoZSBjbGFzc2VzIHRvIHVzZSBvbiB0aGUgZ3JpZCBjZWxsLgogICAgICogQHJldHVybnMge0FycmF5fSBhbiBhcnJheSBvZiBhbGwgdGhlIGNsYXNzZXMgdG8gYXBwbHkgb24gdGhlIGVsZW1lbnQKICAgICAqLwogICAgY2VsbENsYXNzZXM6IGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIFsKICAgICAgICBgcGhvbmUtJHt0aGlzLnNwYW5zLnBob25lfS1jb2x1bW4tc3BhbmAsCiAgICAgICAgYHRhYmxldC1wb3J0cmFpdC0ke3RoaXMuc3BhbnMudGFibGV0UG9ydHJhaXR9LWNvbHVtbi1zcGFuYCwKICAgICAgICBgdGFibGV0LWxhbmRzY2FwZS0ke3RoaXMuc3BhbnMudGFibGV0TGFuZHNjYXBlfS1jb2x1bW4tc3BhbmAsCiAgICAgICAgYGRlc2t0b3Atc3RhbmRhcmQtJHt0aGlzLnNwYW5zLmRlc2t0b3BTdGFuZGFyZH0tY29sdW1uLXNwYW5gLAogICAgICAgIGBkZXNrdG9wLXdpZGUtJHt0aGlzLnNwYW5zLmRlc2t0b3BXaWRlfS1jb2x1bW4tc3BhbmAKICAgICAgXQogICAgfSwKCiAgICAvKioKICAgICAqIEdldCB0aGUgbnVtYmVyIG9mIGNvbHVtbnMgdG8gc3BhbiBmb3IgZWFjaCBkZXZpY2UgY2F0ZWdvcnkuCiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBhIG1hcHBpbmcgb2YgZGV2aWNlIGNhdGVnb3J5IGFuZCBjb2x1bW4gc3BhbnMKICAgICAqLwogICAgc3BhbnM6IGZ1bmN0aW9uICgpIHsKICAgICAgY29uc3Qgc3BhblNldCA9IHRoaXMuc3BhblNldAogICAgICBjb25zdCBjb3VudCA9IHNwYW5TZXQubGVuZ3RoCgogICAgICAvLyBTdGFydCB3aXRoIG51bGwKICAgICAgbGV0IHBob25lID0gbnVsbAoKICAgICAgbGV0IHRhYmxldCA9IG51bGwKICAgICAgbGV0IHRhYmxldFBvcnRyYWl0ID0gbnVsbAogICAgICBsZXQgdGFibGV0TGFuZHNjYXBlID0gbnVsbAoKICAgICAgbGV0IGRlc2t0b3AgPSBudWxsCiAgICAgIGxldCBkZXNrdG9wU3RhbmRhcmQgPSBudWxsCiAgICAgIGxldCBkZXNrdG9wV2lkZSA9IG51bGwKCiAgICAgIC8vIEFzc2lnbiBsaXN0IGl0ZW1zCiAgICAgIHN3aXRjaCAoY291bnQpIHsKICAgICAgICBjYXNlIDE6CiAgICAgICAgICBbCiAgICAgICAgICAgIGRlc2t0b3AKICAgICAgICAgIF0gPSBzcGFuU2V0CiAgICAgICAgICBicmVhawogICAgICAgIGNhc2UgMjoKICAgICAgICAgIFsKICAgICAgICAgICAgcGhvbmUsCiAgICAgICAgICAgIGRlc2t0b3AKICAgICAgICAgIF0gPSBzcGFuU2V0CiAgICAgICAgICBicmVhawogICAgICAgIGNhc2UgMzoKICAgICAgICAgIFsKICAgICAgICAgICAgcGhvbmUsCiAgICAgICAgICAgIHRhYmxldCwKICAgICAgICAgICAgZGVza3RvcAogICAgICAgICAgXSA9IHNwYW5TZXQKICAgICAgICAgIGJyZWFrCiAgICAgICAgY2FzZSA0OgogICAgICAgICAgWwogICAgICAgICAgICBwaG9uZSwKICAgICAgICAgICAgdGFibGV0LAogICAgICAgICAgICBkZXNrdG9wU3RhbmRhcmQsCiAgICAgICAgICAgIGRlc2t0b3BXaWRlCiAgICAgICAgICBdID0gc3BhblNldAogICAgICAgICAgYnJlYWsKICAgICAgICBjYXNlIDU6CiAgICAgICAgICBbCiAgICAgICAgICAgIHBob25lLAogICAgICAgICAgICB0YWJsZXRQb3J0cmFpdCwKICAgICAgICAgICAgdGFibGV0TGFuZHNjYXBlLAogICAgICAgICAgICBkZXNrdG9wU3RhbmRhcmQsCiAgICAgICAgICAgIGRlc2t0b3BXaWRlCiAgICAgICAgICBdID0gc3BhblNldAogICAgICAgICAgYnJlYWsKICAgICAgfQoKICAgICAgLy8gRmFsbCBiYWNrIGZvciBlbXB0eSB2YWx1ZXMKICAgICAgcGhvbmUgPSBwaG9uZSB8fCAxMgoKICAgICAgdGFibGV0UG9ydHJhaXQgPSB0YWJsZXRQb3J0cmFpdCB8fCB0YWJsZXQgfHwgcGhvbmUKICAgICAgdGFibGV0TGFuZHNjYXBlID0gdGFibGV0TGFuZHNjYXBlIHx8IHRhYmxldCB8fCBkZXNrdG9wCgogICAgICBkZXNrdG9wU3RhbmRhcmQgPSBkZXNrdG9wU3RhbmRhcmQgfHwgZGVza3RvcAogICAgICBkZXNrdG9wV2lkZSA9IGRlc2t0b3BXaWRlIHx8IGRlc2t0b3AKCiAgICAgIHJldHVybiB7CiAgICAgICAgcGhvbmUsCiAgICAgICAgdGFibGV0UG9ydHJhaXQsCiAgICAgICAgdGFibGV0TGFuZHNjYXBlLAogICAgICAgIGRlc2t0b3BTdGFuZGFyZCwKICAgICAgICBkZXNrdG9wV2lkZQogICAgICB9CiAgICB9CiAgfQp9Cg=="},{"version":3,"sources":["Cell.vue"],"names":[],"mappings":";;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Cell.vue","sourceRoot":"src/components/layout/grid/pieces/cell","sourcesContent":["<template>\n  <div class=\"cell\" :class=\"cellClasses\">\n    <!-- @slot Content goes here -->\n    <slot>&nbsp;</slot>\n  </div>\n</template>\n\n<script>\n  /**\n   * This component is one cell in a grid layout.\n   */\n  export default {\n    name: 'Cell', // Always use as Grid.Cell\n    props: {\n      /**\n       * _the number of slices this column should span on different devices_\n       *\n       * Note that in a 12-slice grid, the number of columns that can be\n       * accommodated is 12 / span.\n       *\n       * Other than desktop, all values have a default and will be resolved as\n       * follows. On phones and tablets in portrait orientation, the cell\n       * occupies all twelve slices. Tablets in landscape orientation and big\n       * desktops fall back to the slices configured for the standard desktop.\n       *\n       * With these fallbacks in mind, depending on the length of the array,\n       * the values are interpreted differently.\n       *\n       * [a=desktop]\n       * is interpreted as [12, 12, a, a, a]\n       *\n       * [a=phone, b=desktop]\n       * is interpreted as [a a, b, b, b]\n       *\n       * [a=phone, b=tablet, c=desktop]\n       * is interpreted as [a, b, b, c, c]\n       *\n       * [a=phone, b=tablet, c=desktop-standard, d=desktop-wide]\n       * is interpreted as [a, b, b, c, d]\n       *\n       * [a=phone, b=tablet-portrait, c=tablet-landscape, d=desktop-standard, e=desktop-wide]\n       * is interpreted as [a, b, c, d, e]\n       */\n      spanSet: {\n        type: Array,\n        required: true,\n        validator: val => val.length >= 1 && val.length <= 5 && val.every(\n          span => span >= 1 && span <= 12\n        )\n      }\n    },\n    computed: {\n      /**\n       * Get the classes to use on the grid cell.\n       * @returns {Array} an array of all the classes to apply on the element\n       */\n      cellClasses: function () {\n        return [\n          `phone-${this.spans.phone}-column-span`,\n          `tablet-portrait-${this.spans.tabletPortrait}-column-span`,\n          `tablet-landscape-${this.spans.tabletLandscape}-column-span`,\n          `desktop-standard-${this.spans.desktopStandard}-column-span`,\n          `desktop-wide-${this.spans.desktopWide}-column-span`\n        ]\n      },\n\n      /**\n       * Get the number of columns to span for each device category.\n       * @returns {Object} a mapping of device category and column spans\n       */\n      spans: function () {\n        const spanSet = this.spanSet\n        const count = spanSet.length\n\n        // Start with null\n        let phone = null\n\n        let tablet = null\n        let tabletPortrait = null\n        let tabletLandscape = null\n\n        let desktop = null\n        let desktopStandard = null\n        let desktopWide = null\n\n        // Assign list items\n        switch (count) {\n          case 1:\n            [\n              desktop\n            ] = spanSet\n            break\n          case 2:\n            [\n              phone,\n              desktop\n            ] = spanSet\n            break\n          case 3:\n            [\n              phone,\n              tablet,\n              desktop\n            ] = spanSet\n            break\n          case 4:\n            [\n              phone,\n              tablet,\n              desktopStandard,\n              desktopWide\n            ] = spanSet\n            break\n          case 5:\n            [\n              phone,\n              tabletPortrait,\n              tabletLandscape,\n              desktopStandard,\n              desktopWide\n            ] = spanSet\n            break\n        }\n\n        // Fall back for empty values\n        phone = phone || 12\n\n        tabletPortrait = tabletPortrait || tablet || phone\n        tabletLandscape = tabletLandscape || tablet || desktop\n\n        desktopStandard = desktopStandard || desktop\n        desktopWide = desktopWide || desktop\n\n        return {\n          phone,\n          tabletPortrait,\n          tabletLandscape,\n          desktopStandard,\n          desktopWide\n        }\n      }\n    }\n  }\n</script>\n\n<style scoped lang=\"scss\" src=\"./Cell.scss\"/>\n"]}]}