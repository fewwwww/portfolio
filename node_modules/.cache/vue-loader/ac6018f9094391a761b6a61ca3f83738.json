{"remainingRequest":"/Users/msfew/portfolio/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/msfew/portfolio/src/templates/portfolio/commands/Help.vue?vue&type=style&index=0&id=a013b1bc&scoped=true&lang=scss&","dependencies":[{"path":"/Users/msfew/portfolio/src/templates/portfolio/commands/Help.vue","mtime":1615276825508},{"path":"/Users/msfew/portfolio/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/msfew/portfolio/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/msfew/portfolio/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/msfew/portfolio/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/msfew/portfolio/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/msfew/portfolio/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCkB1c2UgJ35AL3N0eWxlcy90b2tlbnMvZGV2aWNlcyc7CgpAdXNlICd+QC9zdHlsZXMvdXRpbHMvbWVkaWEnOwoKLmhlbHAgewogIHVsIHsKICAgIGxpc3Qtc3R5bGU6IG5vbmU7CgogICAgcGFkZGluZy1sZWZ0OiAwOwoKICAgIG1hcmdpbjogMDsKCiAgICAmLmNvbW1hbmQtbGlzdCB7CiAgICAgIEBpbmNsdWRlIG1lZGlhLmRldmljZS1zcGVjaWZpYyhkZXZpY2VzLiRncm91cC1ub24tcGhvbmUpIHsKICAgICAgICBjb2x1bW5zOiAyOwogICAgICB9CiAgICB9CiAgfQp9Cg=="},{"version":3,"sources":["Help.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiJA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Help.vue","sourceRoot":"src/templates/portfolio/commands","sourcesContent":["<template>\n  <div class=\"help\">\n\n    <template v-if=\"!args.cmdname\">\n      These commands are supported. Hover over them for more info.\n      <ul class=\"command-list\">\n        <li\n          v-for=\"(command, cmdName, index) in filteredMapping\"\n          :key=\"index\">\n          <span\n            v-html=\"commandSyntax(command)\"\n            :title=\"command.description\">\n          </span>\n        </li>\n      </ul>\n    </template>\n    <template v-else>\n      <template v-if=\"args.cmdname === 'keyboard'\">\n        <ul>\n          <li>\n            Cycle through terminal history using\n            <span class=\"cyan-colored\">&uarr;</span> &\n            <span class=\"cyan-colored\">&darr;</span>.\n          </li>\n\n          <li>\n            Autocomplete command using\n            <span class=\"cyan-colored\" title=\"Tab\">Tab</span>.\n          </li>\n\n          <li>\n            Abort command using\n            <span class=\"cyan-colored\" title=\"Tab\">Ctrl</span> +\n            <span class=\"cyan-colored\" title=\"Tab\">C</span>.\n          </li>\n        </ul>\n        Use the mouse if you're not CLI-savvy.\n      </template>\n      <template v-else>\n        <template v-if=\"command\">\n          {{ command.name }}\n          <p>\n            SYNOPSIS:<br/>\n            &nbsp;&nbsp;<span v-html=\"commandSyntax(command)\"></span>\n          </p>\n          <p>\n            DESCRIPTION:<br/>\n            &nbsp;&nbsp;{{ command.description }}\n          </p>\n        </template>\n        <template v-else>\n          <BadCommand :argv=\"[args.cmdname]\"/>\n        </template>\n      </template>\n    </template>\n  </div>\n</template>\n\n<script>\n  import { mapping } from '@/templates/portfolio/commands'\n\n  import argumented from '@/mixins/argumented'\n\n  import BadCommand from '@/templates/portfolio/commands/BadCommand'\n\n  /**\n   * This command gives some help with using the CLI.\n   */\n  export default {\n    name: 'Help',\n    mixins: [\n      argumented\n    ],\n    components: {\n      BadCommand\n    },\n    argSpec: {\n      args: [\n        {\n          name: 'cmdname',\n          type: String\n        }\n      ],\n      kwargs: []\n    },\n    props: {\n      /**\n       * _the arguments passed to the command_\n       */\n      argv: {\n        type: Array,\n        default: () => []\n      }\n    },\n    computed: {\n      /**\n       * _the mapping object excluding commands that chose to be hidden_\n       */\n      filteredMapping () {\n        return Object.fromEntries(\n          Object.entries(mapping).filter(([, command]) => !command.isHidden)\n        )\n      },\n      command () {\n        if (this.args.cmdname in mapping) {\n          return mapping[this.args.cmdname]\n        } else {\n          return false\n        }\n      }\n    },\n    methods: {\n      commandSyntax (command) {\n        let rep\n\n        const { name } = command\n        rep = `<span class=\"green-colored\"><strong>${name}</strong></span>`\n\n        if ('args' in command) {\n          ['kwargs', 'args'].forEach(type => {\n            command.args[type].forEach(arg => {\n              let argRep = `${arg.name}`\n              if ('aliases' in arg) {\n                arg.aliases.forEach(alias => {\n                  argRep = `${argRep}/${alias}`\n                })\n              }\n\n              // Make optional arguments boxed\n              if (arg.required !== true) {\n                argRep = `[${argRep}]`\n              }\n\n              rep = `${rep} <span class=\"blue-colored\">${argRep}</span>`\n            })\n          })\n        }\n\n        return rep\n      }\n    }\n  }\n</script>\n\n<style scoped lang=\"scss\">\n  @use '~@/styles/tokens/devices';\n\n  @use '~@/styles/utils/media';\n\n  .help {\n    ul {\n      list-style: none;\n\n      padding-left: 0;\n\n      margin: 0;\n\n      &.command-list {\n        @include media.device-specific(devices.$group-non-phone) {\n          columns: 2;\n        }\n      }\n    }\n  }\n</style>\n"]}]}