{"remainingRequest":"/Users/msfew/portfolio/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/msfew/portfolio/src/components/portfolio/terminal/pieces/present/Present.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/msfew/portfolio/src/components/portfolio/terminal/pieces/present/Present.vue","mtime":1615276825501},{"path":"/Users/msfew/portfolio/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/msfew/portfolio/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/msfew/portfolio/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/msfew/portfolio/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IG1hcEFjdGlvbnMsIG1hcFN0YXRlIH0gZnJvbSAndnVleCcKCmltcG9ydCBQcm9tcHQgZnJvbSAnLi4vcHJvbXB0L1Byb21wdCcKCi8qKgogKiBUaGlzIGNvbW1hbmQgcmVwcmVzZW50cyB0aGUgcHJlc2VudCBvZiB0aGUgdGVybWluYWwsIHdhaXRpbmcgZm9yIHRoZSB1c2VyJ3MKICogaW5wdXQgd2l0aCBhIHByb21wdC4KICovCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnUHJlc2VudCcsCiAgY29tcG9uZW50czogewogICAgUHJvbXB0CiAgfSwKICBkYXRhICgpIHsKICAgIHJldHVybiB7CiAgICAgIHJlYWN0aXZpdHlIYWNrOiAwLAogICAgICBjb21tYW5kOiAnJywKICAgICAgdHJhdmVyc2FsOiB7CiAgICAgICAgaW5kZXg6IDAsCiAgICAgICAgYmFja3VwOiAnJwogICAgICB9CiAgICB9CiAgfSwKICBjb21wdXRlZDogewogICAgLyoqCiAgICAgKiBHZXQgdGhlIHN0eWxlcyB0byBhcHBseSBvbiB0aGUgY29tbWFuZCBmaWVsZC4KICAgICAqIEByZXR1cm5zIHtPYmplY3R9IGFuIG1hcHBpbmcgb2YgQ1NTIHByb3BlcnRpZXMgYW5kIHZhbHVlcyB0byBhcHBseSBvbiB0aGUgZWxlbWVudAogICAgICovCiAgICBjb21tYW5kRmllbGRTdHlsZXMgKCkgewogICAgICByZXR1cm4gewogICAgICAgICctLWNoYXJhY3RlcnMtZmlsbGVkJzogYCR7dGhpcy5jb21tYW5kLmxlbmd0aH1jaGAKICAgICAgfQogICAgfSwKICAgIC8qKgogICAgICogR2V0IHRoZSBzdHlsZXMgdG8gYXBwbHkgb24gdGhlIGZhdXggY2FyZXQuCiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBhbiBtYXBwaW5nIG9mIENTUyBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXMgdG8gYXBwbHkgb24gdGhlIGVsZW1lbnQKICAgICAqLwogICAgZmF1eENhcmV0U3R5bGVzICgpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICAnLS1jaGFyYWN0ZXJzLWRpc3BsYWNlZCc6IGAke3RoaXMuY2FyZXRQb3NpdGlvbiAtIHRoaXMuY29tbWFuZC5sZW5ndGh9Y2hgCiAgICAgIH0KICAgIH0sCgogICAgLyoqCiAgICAgKiBHZXQgdGhlIHBvc2l0aW9uIG9mIHRoZSBjYXJldCBpbiB0aGUgY29tbWFuZCBpbnB1dCBmaWVsZC4gU2luY2UgdGhpcyBpcwogICAgICogYSBub24tcmVhY3RpdmUgcHJvcGVydHksIGFuIGV2ZXIgY2hhbmdpbmcgZGF0YSB2YWx1ZSBgcmVhY3Rpdml0eUhhY2tgCiAgICAgKiBpcyBhY2Nlc3NlZCBpbnNpZGUuCiAgICAgKi8KICAgIGNhcmV0UG9zaXRpb24gKCkgewogICAgICBpZiAoIXRoaXMucmVhY3Rpdml0eUhhY2spIHsKICAgICAgICByZXR1cm4KICAgICAgfQogICAgICByZXR1cm4gdGhpcy4kcmVmcy5jb21tYW5kRmllbGQuc2VsZWN0aW9uU3RhcnQKICAgIH0sCgogICAgLi4ubWFwU3RhdGUoJ3BvcnRmb2xpbycsIFsKICAgICAgJ2N1cnJlbnROb2RlJywKICAgICAgJ2ludGVyYWN0aW9uSGlzdG9yeScsCiAgICAgICdpc1Byb2Nlc3NpbmcnCiAgICBdKQogIH0sCiAgd2F0Y2g6IHsKICAgIC8qKgogICAgICogV2hlbiBpbnRlcmFjdGlvbiBoaXN0b3J5IGlzIGNoYW5nZWQsIHdoaWNoIGVzc2VudGlhbGx5IG1lYW5zIGEgbmV3CiAgICAgKiBpbnRlcmFjdGlvbiBoYXMgYmVlbiBhZGRlZCwgc2Nyb2xsIHRvIHRoZSBib3R0b20uCiAgICAgKi8KICAgIGludGVyYWN0aW9uSGlzdG9yeSAoKSB7CiAgICAgIHRoaXMuc2Nyb2xsVG9Db21tYW5kRmllbGQoKQogICAgfSwKICAgIC8qKgogICAgICogV2hlbiB0aGUgcHJvY2Vzc2luZyBzdGF0ZSBvZiB0aGUgdGVybWluYWwgaXMgY2hhbmdlZCwgZWl0aGVyIHdoZW4KICAgICAqIHByb2Nlc3Npbmcgc3RhcnRzIG9yIGVuZHMsIHNjcm9sbCB0byB0aGUgYm90dG9tLgogICAgICovCiAgICBpc1Byb2Nlc3NpbmcgKCkgewogICAgICB0aGlzLnNjcm9sbFRvQ29tbWFuZEZpZWxkKCkKICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIC8qKgogICAgICogR3JhYiBmb2N1cyBvbiB0aGUgY29tbWFuZCBpbnB1dCBmaWVsZCBmcm9tIHRoZSBkb2N1bWVudC4gQWxzbyBtb3ZlcyB0aGUKICAgICAqIGNhcmV0IHRvIHRoZSBlbmQgb2YgdGhlIGZpZWxkLgogICAgICovCiAgICB0YWtlRm9jdXMgKCkgewogICAgICB0aGlzLiRyZWZzLmNvbW1hbmRGaWVsZC5mb2N1cygpCiAgICAgIHRoaXMuJHJlZnMuY29tbWFuZEZpZWxkLnNldFNlbGVjdGlvblJhbmdlKAogICAgICAgIHRoaXMuY29tbWFuZC5sZW5ndGgsCiAgICAgICAgdGhpcy5jb21tYW5kLmxlbmd0aAogICAgICApCiAgICAgIHRoaXMucmVhY3Rpdml0eUhhY2srKwogICAgfSwKICAgIC8qKgogICAgICogR2l2ZSBhd2F5IHRoZSBmb2N1cyBmcm9tIHRoZSBjb21tYW5kIGlucHV0IGZpZWxkLgogICAgICovCiAgICBsb3NlRm9jdXMgKCkgewogICAgICB0aGlzLiRyZWZzLmNvbW1hbmRGaWVsZC5ibHVyKCkKICAgIH0sCgogICAgLyoqCiAgICAgKiBBY2Nlc3MgdGhlIGhpc3Rvcnkgc3RhY2sgYmFja3dhcmRzLgogICAgICovCiAgICB0cmF2ZXJzZUhpc3RvcnlVcCAoKSB7CiAgICAgIGlmICh0aGlzLnRyYXZlcnNhbC5pbmRleCA9PT0gdGhpcy5pbnRlcmFjdGlvbkhpc3RvcnkubGVuZ3RoKSB7CiAgICAgICAgcmV0dXJuCiAgICAgIH0KCiAgICAgIGlmICh0aGlzLnRyYXZlcnNhbC5pbmRleCA9PT0gMCkgewogICAgICAgIHRoaXMudHJhdmVyc2FsLmJhY2t1cCA9IHRoaXMuY29tbWFuZAogICAgICB9CiAgICAgIHRoaXMudHJhdmVyc2FsLmluZGV4KysKICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmludGVyYWN0aW9uSGlzdG9yeS5sZW5ndGggLSB0aGlzLnRyYXZlcnNhbC5pbmRleAogICAgICB0aGlzLmNvbW1hbmQgPSB0aGlzLmludGVyYWN0aW9uSGlzdG9yeVtpbmRleF0uaW5wdXQuY29tbWFuZAogICAgfSwKICAgIC8qKgogICAgICogQWNjZXNzIHRoZSBoaXN0b3J5IHN0YWNrIGZvcndhcmRzLgogICAgICovCiAgICB0cmF2ZXJzZUhpc3RvcnlEb3duICgpIHsKICAgICAgaWYgKHRoaXMudHJhdmVyc2FsLmluZGV4ID09PSAwKSB7CiAgICAgICAgcmV0dXJuCiAgICAgIH0KCiAgICAgIHRoaXMudHJhdmVyc2FsLmluZGV4LS0KICAgICAgaWYgKHRoaXMudHJhdmVyc2FsLmluZGV4ID09PSAwKSB7CiAgICAgICAgdGhpcy5jb21tYW5kID0gdGhpcy50cmF2ZXJzYWwuYmFja3VwCiAgICAgIH0gZWxzZSB7CiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmludGVyYWN0aW9uSGlzdG9yeS5sZW5ndGggLSB0aGlzLnRyYXZlcnNhbC5pbmRleAogICAgICAgIHRoaXMuY29tbWFuZCA9IHRoaXMuaW50ZXJhY3Rpb25IaXN0b3J5W2luZGV4XS5pbnB1dC5jb21tYW5kCiAgICAgIH0KICAgIH0sCiAgICAvKioKICAgICAqIFJlc2V0IGhpc3RvcnkgdHJhdmVyc2FsIGluIGJvdGggZGlyZWN0aW9ucy4KICAgICAqLwogICAgcmVzZXRUcmF2ZXJzYWwgKCkgewogICAgICB0aGlzLnRyYXZlcnNhbCA9IHsKICAgICAgICBpbmRleDogMCwKICAgICAgICBiYWNrdXA6ICcnCiAgICAgIH0KICAgIH0sCgogICAgLyoqCiAgICAgKiBBdXRvY29tcGxldGUgdGhlIGNvbW1hbmQgYmFzZWQgb24gdGhlIHRleHQgZW50ZXJlZCBzbyBmYXIuIEl0IHBvcHVsYXRlcwogICAgICogdGhlIGNvbW1hbmQgZmllbGQgaWYgYW4gdW5hbWJpZ3VvdXMgY29tcGxldGlvbiBjYW4gYmUgbWFkZSBhbmQgaWYgbm90LAogICAgICogZGlzcGxheXMgYSBsaXN0IG9mIHBvc3NpYmxlIGNob2ljZXMuCiAgICAgKi8KICAgIGF1dG9jb21wbGV0ZUNvbW1hbmQgKCkgewogICAgICBpZiAodGhpcy5jb21tYW5kID09PSAnJykgewogICAgICAgIHRoaXMuY29tbWFuZCA9ICdoZWxwJwogICAgICB9IGVsc2UgewogICAgICAgIC8vIFRPRE8KICAgICAgICBjb25zb2xlLmxvZygnUmVxdWVzdCB0byBhdXRvY29tcGxldGU6JywgdGhpcy5jb21tYW5kKQogICAgICB9CiAgICB9LAogICAgLyoqCiAgICAgKiBTdWJtaXQgdGhlIGNvbW1hbmQgZm9yIHByb2Nlc3NpbmcgYW5kIGNsZWFyIHRoZSBoaXN0b3J5IGZpZWxkIGZvciB0aGUKICAgICAqIG5leHQgaW5wdXQuCiAgICAgKi8KICAgIHN1Ym1pdENvbW1hbmQgKCkgewogICAgICBpZiAodGhpcy5jb21tYW5kLnRyaW0oKSkgewogICAgICAgIHRoaXMucnVuQ29tbWFuZCh7CiAgICAgICAgICBjb21tYW5kOiB0aGlzLmNvbW1hbmQuc3Vic3RyaW5nKDApCiAgICAgICAgfSkKICAgICAgICB0aGlzLmNvbW1hbmQgPSAnJwogICAgICAgIHRoaXMucmVzZXRUcmF2ZXJzYWwoKQogICAgICB9CiAgICB9LAogICAgLyoqCiAgICAgKiBDYW5jZWwgdGhlIGV4ZWN1dGlvbiBvZiB0aGUgZW50ZXJlZCBjb21tYW5kIGFuZCBjbGVhciB0aGUgaW5wdXQgZmllbGQuCiAgICAgKi8KICAgIGNhbmNlbENvbW1hbmQgKCkgewogICAgICB0aGlzLmNvbW1hbmQgPSAnJwogICAgICB0aGlzLnJlc2V0VHJhdmVyc2FsKCkKICAgIH0sCgogICAgLyoqCiAgICAgKiBIYW5kbGUgYSBrZXl1cCBldmVudC4KICAgICAqIFRoaXMgaW52b2x2ZXMgdXBkYXRpbmcgdGhlIGRhdGEgdmFyaWFibGUgYHJlYWN0aXZpdHlIYWNrYC4KICAgICAqLwogICAgcHJvY2Vzc0tleXVwICgpIHsKICAgICAgdGhpcy5yZWFjdGl2aXR5SGFjaysrCiAgICB9LAogICAgLyoqCiAgICAgKiBIYW5kbGUgYW4gaW5wdXQgZXZlbnQuCiAgICAgKiBUaGlzIGludm9sdmVzIHVwZGF0aW5nIHRoZSBkYXRhIHZhcmlhYmxlIGByZWFjdGl2aXR5SGFja2AuCiAgICAgKi8KICAgIHByb2Nlc3NJbnB1dCAoKSB7CiAgICAgIHRoaXMucmVhY3Rpdml0eUhhY2srKwogICAgfSwKICAgIC8qKgogICAgICogSGFuZGxlIGEgY2xpY2sgZXZlbnQuCiAgICAgKiBUaGlzIGludm9sdmVzIHVwZGF0aW5nIHRoZSBkYXRhIHZhcmlhYmxlIGByZWFjdGl2aXR5SGFja2AuCiAgICAgKi8KICAgIHByb2Nlc3NDbGljayAoKSB7CiAgICAgIHRoaXMucmVhY3Rpdml0eUhhY2srKwogICAgfSwKCiAgICAvKioKICAgICAqIFNjcm9sbCB0byB0aGUgYm90dG9tIG9mIHRoZSB0ZXJtaW5hbCB0byBzaG93IHRoZSBjb21tYW5kIGZpZWxkLgogICAgICovCiAgICBzY3JvbGxUb0NvbW1hbmRGaWVsZCAoKSB7CiAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHsKICAgICAgICBkb2N1bWVudC5ib2R5LnNjcm9sbEludG9WaWV3KHsKICAgICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJywKICAgICAgICAgIGJsb2NrOiAnZW5kJwogICAgICAgIH0pCiAgICAgIH0pCiAgICB9LAoKICAgIC4uLm1hcEFjdGlvbnMoJ3BvcnRmb2xpbycsIFsKICAgICAgJ3J1bkNvbW1hbmQnCiAgICBdKQogIH0sCiAgLyoqCiAgICogQWgsIHRoZSByZWFjdGl2aXR5IGhhY2suCiAgICoKICAgKiBSZWZzIGluIFZ1ZSBhcmUgbm90IHJlYWN0aXZlLiBTbyB0aGVyZSBpcyBubyB3YXkgdG8gcmVhY3RpdmVseSBrbm93IHRoZQogICAqIHBvc2l0aW9uIG9mIHRoZSBjdXJzb3IgaW4gdGhlIGlucHV0IHJlZmVyZW5jZWQgYnkgYGNvbW1hbmRGaWVsZGAuIEV2ZW4gaWYKICAgKiBkZWZpbmVkIGFzIGEgY29tcHV0ZWQgcHJvcGVydHksIGNoYW5nZXMgbWFkZSB0byBpdCBhcmUgbm90IG9ic2VydmVkLgogICAqCiAgICogQnV0IHdlIGNhbiBtYWtlIHRoZSBjb21wdXRlZCBwcm9wZXJ0eSByZWFjdGl2ZSBieSByZWZlcnJpbmcgdG8gYQogICAqIGRpZmZlcmVudCByZWFjdGl2ZSBwcm9wZXJ0eSBpbnNpZGUgdGhlIGZ1bmN0aW9uLCB3aGljaCB3ZSB1cGRhdGUgZnJvbQogICAqIHRpbWUgdG8gdGltZS4gRm9yIGFueSBldmVudCBvY2N1cmluZyBvbiB0aGUgY29tbWFuZCBpbnB1dCBmaWVsZCB3aXRoIHRoZQogICAqIHBvdGVudGlhbCB0byB1cGRhdGUgdGhlIHZhbHVlIG9mIGBzZWxlY3Rpb25TdGFydGAsIHdlIHVwZGF0ZSB0aGUgZGF0YQogICAqIHZhcmlhYmxlIGByZWFjdGl2aXR5SGFja2Agb24gdGhlIGVsZW1lbnQuIFRoaXMgY2F1c2VzIHRoZSBpbnRlbmRlZAogICAqIHJlY29tcHV0YXRpb24gb2YgYGNhcmV0UG9zaXRpb25gLgogICAqCiAgICogUmVmZXJlbmNlczoKICAgKiAtIGh0dHBzOi8vbG9nYXJldG0uY29tL2Jsb2cvMjAxOS0xMC0xMS1mb3JjaW5nLXJlY29tcHV0YXRpb24tb2YtY29tcHV0ZWQtcHJvcGVydGllcy8KICAgKi8KICBtb3VudGVkICgpIHsKICAgIHRoaXMucmVhY3Rpdml0eUhhY2srKwogIH0KfQo="},{"version":3,"sources":["Present.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Present.vue","sourceRoot":"src/components/portfolio/terminal/pieces/present","sourcesContent":["<template>\n  <div\n    class=\"present\"\n    @click=\"takeFocus\"\n    title=\"[Ctrl + Shift + C] Focus on the terminal input.\">\n    <label\n      class=\"prompt-label\"\n      for=\"command-field\">\n      <Prompt\n        :directory=\"currentNode.name\"\n        is-active/>\n    </label>\n    <input\n      v-shortkey.focus=\"['ctrl', 'shift', 'c']\"\n      v-model=\"command\"\n      class=\"command-field\"\n      id=\"command-field\"\n      :style=\"commandFieldStyles\"\n\n      type=\"text\"\n      autocomplete=\"off\"\n      autocapitalize=\"off\"\n      spellcheck=\"false\"\n\n      @keydown.escape.exact.prevent=\"loseFocus\"\n      @keydown.arrow-up.exact.prevent=\"traverseHistoryUp\"\n      @keydown.arrow-down.exact.prevent=\"traverseHistoryDown\"\n      @keydown.tab.exact.prevent=\"autocompleteCommand\"\n      @keydown.enter.exact.prevent=\"submitCommand\"\n      @keydown.c.shift.ctrl.exact.prevent=\"cancelCommand\"\n      @keyup.stop=\"processKeyup\"\n      @input.stop=\"processInput\"\n      @click.stop=\"processClick\"\n\n      ref=\"commandField\">\n    <span\n      class=\"faux-caret\"\n      :style=\"fauxCaretStyles\">&nbsp;</span>\n  </div>\n</template>\n\n<script>\n  import { mapActions, mapState } from 'vuex'\n\n  import Prompt from '../prompt/Prompt'\n\n  /**\n   * This command represents the present of the terminal, waiting for the user's\n   * input with a prompt.\n   */\n  export default {\n    name: 'Present',\n    components: {\n      Prompt\n    },\n    data () {\n      return {\n        reactivityHack: 0,\n        command: '',\n        traversal: {\n          index: 0,\n          backup: ''\n        }\n      }\n    },\n    computed: {\n      /**\n       * Get the styles to apply on the command field.\n       * @returns {Object} an mapping of CSS properties and values to apply on the element\n       */\n      commandFieldStyles () {\n        return {\n          '--characters-filled': `${this.command.length}ch`\n        }\n      },\n      /**\n       * Get the styles to apply on the faux caret.\n       * @returns {Object} an mapping of CSS properties and values to apply on the element\n       */\n      fauxCaretStyles () {\n        return {\n          '--characters-displaced': `${this.caretPosition - this.command.length}ch`\n        }\n      },\n\n      /**\n       * Get the position of the caret in the command input field. Since this is\n       * a non-reactive property, an ever changing data value `reactivityHack`\n       * is accessed inside.\n       */\n      caretPosition () {\n        if (!this.reactivityHack) {\n          return\n        }\n        return this.$refs.commandField.selectionStart\n      },\n\n      ...mapState('portfolio', [\n        'currentNode',\n        'interactionHistory',\n        'isProcessing'\n      ])\n    },\n    watch: {\n      /**\n       * When interaction history is changed, which essentially means a new\n       * interaction has been added, scroll to the bottom.\n       */\n      interactionHistory () {\n        this.scrollToCommandField()\n      },\n      /**\n       * When the processing state of the terminal is changed, either when\n       * processing starts or ends, scroll to the bottom.\n       */\n      isProcessing () {\n        this.scrollToCommandField()\n      }\n    },\n    methods: {\n      /**\n       * Grab focus on the command input field from the document. Also moves the\n       * caret to the end of the field.\n       */\n      takeFocus () {\n        this.$refs.commandField.focus()\n        this.$refs.commandField.setSelectionRange(\n          this.command.length,\n          this.command.length\n        )\n        this.reactivityHack++\n      },\n      /**\n       * Give away the focus from the command input field.\n       */\n      loseFocus () {\n        this.$refs.commandField.blur()\n      },\n\n      /**\n       * Access the history stack backwards.\n       */\n      traverseHistoryUp () {\n        if (this.traversal.index === this.interactionHistory.length) {\n          return\n        }\n\n        if (this.traversal.index === 0) {\n          this.traversal.backup = this.command\n        }\n        this.traversal.index++\n        const index = this.interactionHistory.length - this.traversal.index\n        this.command = this.interactionHistory[index].input.command\n      },\n      /**\n       * Access the history stack forwards.\n       */\n      traverseHistoryDown () {\n        if (this.traversal.index === 0) {\n          return\n        }\n\n        this.traversal.index--\n        if (this.traversal.index === 0) {\n          this.command = this.traversal.backup\n        } else {\n          const index = this.interactionHistory.length - this.traversal.index\n          this.command = this.interactionHistory[index].input.command\n        }\n      },\n      /**\n       * Reset history traversal in both directions.\n       */\n      resetTraversal () {\n        this.traversal = {\n          index: 0,\n          backup: ''\n        }\n      },\n\n      /**\n       * Autocomplete the command based on the text entered so far. It populates\n       * the command field if an unambiguous completion can be made and if not,\n       * displays a list of possible choices.\n       */\n      autocompleteCommand () {\n        if (this.command === '') {\n          this.command = 'help'\n        } else {\n          // TODO\n          console.log('Request to autocomplete:', this.command)\n        }\n      },\n      /**\n       * Submit the command for processing and clear the history field for the\n       * next input.\n       */\n      submitCommand () {\n        if (this.command.trim()) {\n          this.runCommand({\n            command: this.command.substring(0)\n          })\n          this.command = ''\n          this.resetTraversal()\n        }\n      },\n      /**\n       * Cancel the execution of the entered command and clear the input field.\n       */\n      cancelCommand () {\n        this.command = ''\n        this.resetTraversal()\n      },\n\n      /**\n       * Handle a keyup event.\n       * This involves updating the data variable `reactivityHack`.\n       */\n      processKeyup () {\n        this.reactivityHack++\n      },\n      /**\n       * Handle an input event.\n       * This involves updating the data variable `reactivityHack`.\n       */\n      processInput () {\n        this.reactivityHack++\n      },\n      /**\n       * Handle a click event.\n       * This involves updating the data variable `reactivityHack`.\n       */\n      processClick () {\n        this.reactivityHack++\n      },\n\n      /**\n       * Scroll to the bottom of the terminal to show the command field.\n       */\n      scrollToCommandField () {\n        this.$nextTick(() => {\n          document.body.scrollIntoView({\n            behavior: 'smooth',\n            block: 'end'\n          })\n        })\n      },\n\n      ...mapActions('portfolio', [\n        'runCommand'\n      ])\n    },\n    /**\n     * Ah, the reactivity hack.\n     *\n     * Refs in Vue are not reactive. So there is no way to reactively know the\n     * position of the cursor in the input referenced by `commandField`. Even if\n     * defined as a computed property, changes made to it are not observed.\n     *\n     * But we can make the computed property reactive by referring to a\n     * different reactive property inside the function, which we update from\n     * time to time. For any event occuring on the command input field with the\n     * potential to update the value of `selectionStart`, we update the data\n     * variable `reactivityHack` on the element. This causes the intended\n     * recomputation of `caretPosition`.\n     *\n     * References:\n     * - https://logaretm.com/blog/2019-10-11-forcing-recomputation-of-computed-properties/\n     */\n    mounted () {\n      this.reactivityHack++\n    }\n  }\n</script>\n\n<style scoped lang=\"scss\" src=\"./Present.scss\"/>\n"]}]}