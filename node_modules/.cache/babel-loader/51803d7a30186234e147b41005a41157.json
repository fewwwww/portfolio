{"remainingRequest":"/Users/msfew/Downloads/portfolio-master/node_modules/babel-loader/lib/index.js!/Users/msfew/Downloads/portfolio-master/node_modules/eslint-loader/index.js??ref--13-0!/Users/msfew/Downloads/portfolio-master/src/store/support/tree.js","dependencies":[{"path":"/Users/msfew/Downloads/portfolio-master/src/store/support/tree.js","mtime":1617939276000},{"path":"/Users/msfew/Downloads/portfolio-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/msfew/Downloads/portfolio-master/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/msfew/Downloads/portfolio-master/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZXZlcnkiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mb3ItZWFjaCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluY2x1ZGVzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5mcmVlemUiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudmFsdWVzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmluY2x1ZGVzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaCI7CmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAiL1VzZXJzL21zZmV3L0Rvd25sb2Fkcy9wb3J0Zm9saW8tbWFzdGVyL25vZGVfbW9kdWxlcy9AdnVlL2JhYmVsLXByZXNldC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrIjsKaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICIvVXNlcnMvbXNmZXcvRG93bmxvYWRzL3BvcnRmb2xpby1tYXN0ZXIvbm9kZV9tb2R1bGVzL0B2dWUvYmFiZWwtcHJlc2V0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MiOwppbXBvcnQgYXNzZXJ0IGZyb20gJ2Fzc2VydCc7CnZhciBub2RlVHlwZSA9IE9iamVjdC5mcmVlemUoewogIEZPTERFUjogJ2ZvbGRlcicsCiAgRklMRTogJ2ZpbGUnCn0pOwovKioKICogQSBjbGFzcyB0aGF0IGltcGxlbWVudHMgb25lIG5vZGUgaW4gYSBmaWxlLXN5c3RlbSB0cmVlLiBFYWNoIG5vZGUgbWF5IGVpdGhlcgogKiBiZSBhIGZpbGUgb3IgYSBmb2xkZXIgYW5kIG1heSBoYXZlIGNoaWxkcmVuIGlmIGl0IGlzIGEgZm9sZGVyLgogKi8KCnZhciBOb2RlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAvKioKICAgKiBDcmVhdGUgYSBuZXcgb2JqZWN0IG9mIGNsYXNzIE5vZGUuCiAgICoKICAgKiBAY29uc3RydWN0b3IKICAgKiBAY29uc3RydWN0cyB7Tm9kZX0KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gd2hldGhlciB0aGUgbm9kZSByZXByZXNlbnRzIGEgZmlsZSBvciBhIGZvbGRlcgogICAqIEBwYXJhbSB7c3RyaW5nfSBpY29uIC0gdGhlIGljb24gYXNzb2NpYXRlZCB3aXRoIHRoZSBOb2RlCiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSB0aGUgbmFtZSBvZiB0aGUgTm9kZQogICAqIEBwYXJhbSB7QXJyYXl9IGFsaWFzZXMgLSB0aGUgbGlzdCBvZiBhbHRlcm5hdGl2ZSBuYW1lcyBvZiB0aGUgTm9kZQogICAqLwogIGZ1bmN0aW9uIE5vZGUodHlwZSwgaWNvbiwgbmFtZSkgewogICAgdmFyIGFsaWFzZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IFtdOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBOb2RlKTsKCiAgICBhc3NlcnQoT2JqZWN0LnZhbHVlcyhub2RlVHlwZSkuaW5jbHVkZXModHlwZSkpOwogICAgdGhpcy50eXBlID0gdHlwZTsKICAgIHRoaXMuaWNvbiA9IGljb247CiAgICB0aGlzLm5hbWUgPSBuYW1lOwogICAgdGhpcy5hbGlhc2VzID0gYWxpYXNlczsKICAgIHRoaXMucGFyZW50ID0gbnVsbDsKICAgIHRoaXMuY2hpbGRyZW4gPSBbXTsKICB9CiAgLyoqCiAgICogQ2hlY2sgaWYgdGhlIGdpdmVuIG5hbWUgaXMgZWl0aGVyIHRoZSBwcmltYXJ5IG5hbWUgb2YgdGhlIGN1cnJlbnQgbm9kZSBvcgogICAqIG9uZSBvZiBpdHMgYWxpYXNlcy4KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gdGhlIG5hbWUgd2hpY2ggaXMgdG8gYmUgY2hlY2tlZCBmb3IgYSBtYXRjaAogICAqIEByZXR1cm5zIHtib29sZWFufSB3aGV0aGVyIHRoZSBnaXZlbiBuYW1lIGlzIG9uZSBvZiB0aGUgTm9kZSdzIHZhbGlkIG5hbWVzCiAgICovCgoKICBfY3JlYXRlQ2xhc3MoTm9kZSwgW3sKICAgIGtleTogImhhc05hbWUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGhhc05hbWUobmFtZSkgewogICAgICByZXR1cm4gdGhpcy5uYW1lID09PSBuYW1lIHx8IHRoaXMuYWxpYXNlcy5pbmNsdWRlcyhuYW1lLnRvTG9jYWxlTG93ZXJDYXNlKCkpOwogICAgfQogICAgLyoqCiAgICAgKiBNYWtlIHRoZSBjdXJyZW50IG5vZGUgdGhlIHJvb3Qgbm9kZSBvZiB0aGUgdHJlZS4gVGhlIHByb3BlcnR5IG9mIGEgcm9vdAogICAgICogbm9kZSBpcyB0byBiZSBpdHMgb3duIHBhcmVudCwgZXNzZW50aWFsbHkgYWxsb3dpbmcgaW5maW5pdGUgdXB3YXJkCiAgICAgKiB0cmF2ZXJzYWwuCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAibWFrZVJvb3QiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG1ha2VSb290KCkgewogICAgICB0aGlzLnBhcmVudCA9IHRoaXM7CiAgICB9CiAgICAvKioKICAgICAqIEFkZCB0aGUgZ2l2ZW4gbm9kZSB0byB0aGUgYXMgYSBjaGlsZCBvZiB0aGUgY3VycmVudCBub2RlLiBBbHNvIHVwZGF0ZXMgdGhlCiAgICAgKiByZWZlcmVuY2UgdG8gdGhlIHBhcmVudCBub2RlIGluIHRoZSBjaGlsZCBvYmplY3QuCiAgICAgKgogICAgICogQHBhcmFtIHtOb2RlfSBub2RlIC0gdGhlIG5vZGUgdG8gYXMgYSBjaGlsZCBvZiB0aGUgY3VycmVudCBub2RlCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiYXBwZW5kQ2hpbGQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGVuZENoaWxkKG5vZGUpIHsKICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKG5vZGUpOwogICAgICBub2RlLnBhcmVudCA9IHRoaXM7CiAgICB9CiAgICAvKioKICAgICAqIFRyYXZlcnNlIHRoZSB0cmVlIHVzaW5nIHRoZSBERlQgYWxnb3JpdGhtLiBUaGlzIG1heSBjb250cmlidXRlIHRvIGEgbG9zcwogICAgICogaW4gcGVyZm9ybWFuY2UgYnV0IGl0IHJlcXVpcmVzIGxlc3MgY29kZS4KICAgICAqCiAgICAgKiBUaGUgYXJndW1lbnQgdG8gdGhlIGZ1bmN0aW9uIGlzIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIGEgbm9kZSBhbmQgcmV0dXJucwogICAgICogYSBCb29sZWFuIHZhbHVlLCB3aGljaCBpZiBmYWxzeSwgc3RvcHMgZnVydGhlciB0cmF2ZXJzYWwuCiAgICAgKgogICAgICogQHBhcmFtIHtmdW5jdGlvbn0gZnVuYyAtIHRoZSBmdW5jdGlvbiB0byBleGVjdXRlIG9uIGVhY2ggbm9kZQogICAgICovCgogIH0sIHsKICAgIGtleTogInRyYXZlcnNlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB0cmF2ZXJzZShmdW5jKSB7CiAgICAgIHZhciBzaG91bGRDb250aW51ZSA9IGZ1bmModGhpcyk7CgogICAgICBpZiAoIXNob3VsZENvbnRpbnVlKSB7CiAgICAgICAgcmV0dXJuIHNob3VsZENvbnRpbnVlOwogICAgICB9CgogICAgICB0aGlzLmNoaWxkcmVuLmV2ZXJ5KGZ1bmN0aW9uIChjaGlsZCkgewogICAgICAgIHNob3VsZENvbnRpbnVlID0gY2hpbGQudHJhdmVyc2UoZnVuYyk7CiAgICAgICAgcmV0dXJuIHNob3VsZENvbnRpbnVlOwogICAgICB9KTsKICAgICAgcmV0dXJuIHNob3VsZENvbnRpbnVlOwogICAgfQogICAgLyoqCiAgICAgKiBEZXRlcm1pbmUgd2hldGhlciB0aGlzIG5vZGUgcmVwcmVzZW50cyBhIGZpbGUgc3lzdGVtIGZvbGRlci4KICAgICAqCiAgICAgKiBAcmV0dXJuIHtib29sZWFufSB3aGV0aGVyIHRoaXMgbm9kZSByZXByZXNlbnRzIGEgZmlsZSBzeXN0ZW0gZm9sZGVyCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiaXNGb2xkZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGlzRm9sZGVyKCkgewogICAgICByZXR1cm4gdGhpcy50eXBlID09PSBub2RlVHlwZS5GT0xERVI7CiAgICB9CiAgICAvKioKICAgICAqIERldGVybWluZSB3aGV0aGVyIHRoaXMgbm9kZSByZXByZXNlbnRzIGEgZmlsZSBzeXN0ZW0gZmlsZS4KICAgICAqCiAgICAgKiBAcmV0dXJuIHtib29sZWFufSB3aGV0aGVyIHRoaXMgbm9kZSByZXByZXNlbnRzIGEgZmlsZSBzeXN0ZW0gZmlsZQogICAgICovCgogIH0sIHsKICAgIGtleTogImlzRmlsZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaXNGaWxlKCkgewogICAgICByZXR1cm4gdGhpcy50eXBlID09PSBub2RlVHlwZS5GSUxFOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIE5vZGU7Cn0oKTsKLyoqCiAqIFBhcnNlIHRoZSBmaWxlIHN5c3RlbSB0cmVlLCBnaXZlbiBhcyBhIHBsYWluIG9sZCBKYXZhU2NyaXB0IG9iamVjdCBpbnRvIGEKICogdHJlZSBvZiBOb2RlIG9iamVjdHMgd2l0aCByaWNoZXIgZnVuY3Rpb25hbGl0eS4KICoKICogQHBhcmFtIHtPYmplY3R9IHBvam8gLSB0aGUgZmlsZSBzeXN0ZW0gdHJlZSBwYXJzZWQgZnJvbSBKU09OCiAqIEByZXR1cm4ge05vZGV9IHRoZSByb290IG5vZGUgb2YgdGhlIE5vZGUgdHJlZSBnZW5lcmF0ZWQgZnJvbSB0aGUgb2JqZWN0CiAqLwoKCmZ1bmN0aW9uIHBhcnNlKHBvam8pIHsKICB2YXIgbm9kZSA9IG5ldyBOb2RlKHBvam8udHlwZSwgcG9qby5pY29uLCBwb2pvLm5hbWUsIHBvam8uYWxpYXNlcyk7CgogIGlmIChwb2pvLmNoaWxkcmVuICYmIHBvam8uY2hpbGRyZW4gaW5zdGFuY2VvZiBBcnJheSkgewogICAgcG9qby5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZFBvam8pIHsKICAgICAgbm9kZS5hcHBlbmRDaGlsZChwYXJzZShjaGlsZFBvam8pKTsKICAgIH0pOwogIH0KCiAgcmV0dXJuIG5vZGU7Cn0KCmV4cG9ydCB7IHBhcnNlIH07"},{"version":3,"sources":["/Users/msfew/Downloads/portfolio-master/src/store/support/tree.js"],"names":["assert","nodeType","Object","freeze","FOLDER","FILE","Node","type","icon","name","aliases","values","includes","parent","children","toLocaleLowerCase","node","push","func","shouldContinue","every","child","traverse","parse","pojo","Array","forEach","childPojo","appendChild"],"mappings":";;;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,QAAnB;AAEA,IAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAc;AAC7BC,EAAAA,MAAM,EAAE,QADqB;AAE7BC,EAAAA,IAAI,EAAE;AAFuB,CAAd,CAAjB;AAKA;;;;;IAIMC,I;AACJ;;;;;;;;;;;AAWA,gBAAaC,IAAb,EAAmBC,IAAnB,EAAyBC,IAAzB,EAA6C;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AAC3CV,IAAAA,MAAM,CAACE,MAAM,CAACS,MAAP,CAAcV,QAAd,EAAwBW,QAAxB,CAAiCL,IAAjC,CAAD,CAAN;AACA,SAAKA,IAAL,GAAYA,IAAZ;AAEA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,OAAL,GAAeA,OAAf;AAEA,SAAKG,MAAL,GAAc,IAAd;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACD;AAED;;;;;;;;;;;4BAOSL,I,EAAM;AACb,aAAO,KAAKA,IAAL,KAAcA,IAAd,IAAsB,KAAKC,OAAL,CAAaE,QAAb,CAAsBH,IAAI,CAACM,iBAAL,EAAtB,CAA7B;AACD;AAED;;;;;;;;+BAKY;AACV,WAAKF,MAAL,GAAc,IAAd;AACD;AAED;;;;;;;;;gCAMaG,I,EAAM;AACjB,WAAKF,QAAL,CAAcG,IAAd,CAAmBD,IAAnB;AACAA,MAAAA,IAAI,CAACH,MAAL,GAAc,IAAd;AACD;AAED;;;;;;;;;;;;6BASUK,I,EAAM;AACd,UAAIC,cAAc,GAAGD,IAAI,CAAC,IAAD,CAAzB;;AACA,UAAI,CAACC,cAAL,EAAqB;AACnB,eAAOA,cAAP;AACD;;AAED,WAAKL,QAAL,CAAcM,KAAd,CAAoB,UAAAC,KAAK,EAAI;AAC3BF,QAAAA,cAAc,GAAGE,KAAK,CAACC,QAAN,CAAeJ,IAAf,CAAjB;AACA,eAAOC,cAAP;AACD,OAHD;AAIA,aAAOA,cAAP;AACD;AAED;;;;;;;;+BAKY;AACV,aAAO,KAAKZ,IAAL,KAAcN,QAAQ,CAACG,MAA9B;AACD;AAED;;;;;;;;6BAKU;AACR,aAAO,KAAKG,IAAL,KAAcN,QAAQ,CAACI,IAA9B;AACD;;;;;AAGH;;;;;;;;;AAOA,SAASkB,KAAT,CAAgBC,IAAhB,EAAsB;AACpB,MAAMR,IAAI,GAAG,IAAIV,IAAJ,CACXkB,IAAI,CAACjB,IADM,EAEXiB,IAAI,CAAChB,IAFM,EAGXgB,IAAI,CAACf,IAHM,EAIXe,IAAI,CAACd,OAJM,CAAb;;AAMA,MAAIc,IAAI,CAACV,QAAL,IAAiBU,IAAI,CAACV,QAAL,YAAyBW,KAA9C,EAAqD;AACnDD,IAAAA,IAAI,CAACV,QAAL,CAAcY,OAAd,CAAsB,UAAAC,SAAS,EAAI;AACjCX,MAAAA,IAAI,CAACY,WAAL,CAAiBL,KAAK,CAACI,SAAD,CAAtB;AACD,KAFD;AAGD;;AACD,SAAOX,IAAP;AACD;;AAED,SACEO,KADF","sourcesContent":["import assert from 'assert'\n\nconst nodeType = Object.freeze({\n  FOLDER: 'folder',\n  FILE: 'file'\n})\n\n/**\n * A class that implements one node in a file-system tree. Each node may either\n * be a file or a folder and may have children if it is a folder.\n */\nclass Node {\n  /**\n   * Create a new object of class Node.\n   *\n   * @constructor\n   * @constructs {Node}\n   *\n   * @param {string} type - whether the node represents a file or a folder\n   * @param {string} icon - the icon associated with the Node\n   * @param {string} name - the name of the Node\n   * @param {Array} aliases - the list of alternative names of the Node\n   */\n  constructor (type, icon, name, aliases = []) {\n    assert(Object.values(nodeType).includes(type))\n    this.type = type\n\n    this.icon = icon\n    this.name = name\n    this.aliases = aliases\n\n    this.parent = null\n    this.children = []\n  }\n\n  /**\n   * Check if the given name is either the primary name of the current node or\n   * one of its aliases.\n   *\n   * @param {string} name - the name which is to be checked for a match\n   * @returns {boolean} whether the given name is one of the Node's valid names\n   */\n  hasName (name) {\n    return this.name === name || this.aliases.includes(name.toLocaleLowerCase())\n  }\n\n  /**\n   * Make the current node the root node of the tree. The property of a root\n   * node is to be its own parent, essentially allowing infinite upward\n   * traversal.\n   */\n  makeRoot () {\n    this.parent = this\n  }\n\n  /**\n   * Add the given node to the as a child of the current node. Also updates the\n   * reference to the parent node in the child object.\n   *\n   * @param {Node} node - the node to as a child of the current node\n   */\n  appendChild (node) {\n    this.children.push(node)\n    node.parent = this\n  }\n\n  /**\n   * Traverse the tree using the DFT algorithm. This may contribute to a loss\n   * in performance but it requires less code.\n   *\n   * The argument to the function is a function that accepts a node and returns\n   * a Boolean value, which if falsy, stops further traversal.\n   *\n   * @param {function} func - the function to execute on each node\n   */\n  traverse (func) {\n    let shouldContinue = func(this)\n    if (!shouldContinue) {\n      return shouldContinue\n    }\n\n    this.children.every(child => {\n      shouldContinue = child.traverse(func)\n      return shouldContinue\n    })\n    return shouldContinue\n  }\n\n  /**\n   * Determine whether this node represents a file system folder.\n   *\n   * @return {boolean} whether this node represents a file system folder\n   */\n  isFolder () {\n    return this.type === nodeType.FOLDER\n  }\n\n  /**\n   * Determine whether this node represents a file system file.\n   *\n   * @return {boolean} whether this node represents a file system file\n   */\n  isFile () {\n    return this.type === nodeType.FILE\n  }\n}\n\n/**\n * Parse the file system tree, given as a plain old JavaScript object into a\n * tree of Node objects with richer functionality.\n *\n * @param {Object} pojo - the file system tree parsed from JSON\n * @return {Node} the root node of the Node tree generated from the object\n */\nfunction parse (pojo) {\n  const node = new Node(\n    pojo.type,\n    pojo.icon,\n    pojo.name,\n    pojo.aliases\n  )\n  if (pojo.children && pojo.children instanceof Array) {\n    pojo.children.forEach(childPojo => {\n      node.appendChild(parse(childPojo))\n    })\n  }\n  return node\n}\n\nexport {\n  parse\n}\n"]}]}