{"remainingRequest":"/Users/msfew/portfolio/node_modules/thread-loader/dist/cjs.js!/Users/msfew/portfolio/node_modules/babel-loader/lib/index.js!/Users/msfew/portfolio/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/msfew/portfolio/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/msfew/portfolio/src/components/layout/grid/pieces/cell/Cell.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/msfew/portfolio/src/components/layout/grid/pieces/cell/Cell.vue","mtime":1617939276000},{"path":"/Users/msfew/portfolio/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/msfew/portfolio/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/msfew/portfolio/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/msfew/portfolio/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/msfew/portfolio/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZXZlcnkiOwppbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSAiL1VzZXJzL21zZmV3L3BvcnRmb2xpby9ub2RlX21vZHVsZXMvQHZ1ZS9iYWJlbC1wcmVzZXQtYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5IjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KCi8qKgogKiBUaGlzIGNvbXBvbmVudCBpcyBvbmUgY2VsbCBpbiBhIGdyaWQgbGF5b3V0LgogKi8KZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdDZWxsJywKICAvLyBBbHdheXMgdXNlIGFzIEdyaWQuQ2VsbAogIHByb3BzOiB7CiAgICAvKioKICAgICAqIF90aGUgbnVtYmVyIG9mIHNsaWNlcyB0aGlzIGNvbHVtbiBzaG91bGQgc3BhbiBvbiBkaWZmZXJlbnQgZGV2aWNlc18KICAgICAqCiAgICAgKiBOb3RlIHRoYXQgaW4gYSAxMi1zbGljZSBncmlkLCB0aGUgbnVtYmVyIG9mIGNvbHVtbnMgdGhhdCBjYW4gYmUKICAgICAqIGFjY29tbW9kYXRlZCBpcyAxMiAvIHNwYW4uCiAgICAgKgogICAgICogT3RoZXIgdGhhbiBkZXNrdG9wLCBhbGwgdmFsdWVzIGhhdmUgYSBkZWZhdWx0IGFuZCB3aWxsIGJlIHJlc29sdmVkIGFzCiAgICAgKiBmb2xsb3dzLiBPbiBwaG9uZXMgYW5kIHRhYmxldHMgaW4gcG9ydHJhaXQgb3JpZW50YXRpb24sIHRoZSBjZWxsCiAgICAgKiBvY2N1cGllcyBhbGwgdHdlbHZlIHNsaWNlcy4gVGFibGV0cyBpbiBsYW5kc2NhcGUgb3JpZW50YXRpb24gYW5kIGJpZwogICAgICogZGVza3RvcHMgZmFsbCBiYWNrIHRvIHRoZSBzbGljZXMgY29uZmlndXJlZCBmb3IgdGhlIHN0YW5kYXJkIGRlc2t0b3AuCiAgICAgKgogICAgICogV2l0aCB0aGVzZSBmYWxsYmFja3MgaW4gbWluZCwgZGVwZW5kaW5nIG9uIHRoZSBsZW5ndGggb2YgdGhlIGFycmF5LAogICAgICogdGhlIHZhbHVlcyBhcmUgaW50ZXJwcmV0ZWQgZGlmZmVyZW50bHkuCiAgICAgKgogICAgICogW2E9ZGVza3RvcF0KICAgICAqIGlzIGludGVycHJldGVkIGFzIFsxMiwgMTIsIGEsIGEsIGFdCiAgICAgKgogICAgICogW2E9cGhvbmUsIGI9ZGVza3RvcF0KICAgICAqIGlzIGludGVycHJldGVkIGFzIFthIGEsIGIsIGIsIGJdCiAgICAgKgogICAgICogW2E9cGhvbmUsIGI9dGFibGV0LCBjPWRlc2t0b3BdCiAgICAgKiBpcyBpbnRlcnByZXRlZCBhcyBbYSwgYiwgYiwgYywgY10KICAgICAqCiAgICAgKiBbYT1waG9uZSwgYj10YWJsZXQsIGM9ZGVza3RvcC1zdGFuZGFyZCwgZD1kZXNrdG9wLXdpZGVdCiAgICAgKiBpcyBpbnRlcnByZXRlZCBhcyBbYSwgYiwgYiwgYywgZF0KICAgICAqCiAgICAgKiBbYT1waG9uZSwgYj10YWJsZXQtcG9ydHJhaXQsIGM9dGFibGV0LWxhbmRzY2FwZSwgZD1kZXNrdG9wLXN0YW5kYXJkLCBlPWRlc2t0b3Atd2lkZV0KICAgICAqIGlzIGludGVycHJldGVkIGFzIFthLCBiLCBjLCBkLCBlXQogICAgICovCiAgICBzcGFuU2V0OiB7CiAgICAgIHR5cGU6IEFycmF5LAogICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbiB2YWxpZGF0b3IodmFsKSB7CiAgICAgICAgcmV0dXJuIHZhbC5sZW5ndGggPj0gMSAmJiB2YWwubGVuZ3RoIDw9IDUgJiYgdmFsLmV2ZXJ5KGZ1bmN0aW9uIChzcGFuKSB7CiAgICAgICAgICByZXR1cm4gc3BhbiA+PSAxICYmIHNwYW4gPD0gMTI7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KICB9LAogIGNvbXB1dGVkOiB7CiAgICAvKioKICAgICAqIEdldCB0aGUgY2xhc3NlcyB0byB1c2Ugb24gdGhlIGdyaWQgY2VsbC4KICAgICAqIEByZXR1cm5zIHtBcnJheX0gYW4gYXJyYXkgb2YgYWxsIHRoZSBjbGFzc2VzIHRvIGFwcGx5IG9uIHRoZSBlbGVtZW50CiAgICAgKi8KICAgIGNlbGxDbGFzc2VzOiBmdW5jdGlvbiBjZWxsQ2xhc3NlcygpIHsKICAgICAgcmV0dXJuIFsicGhvbmUtIi5jb25jYXQodGhpcy5zcGFucy5waG9uZSwgIi1jb2x1bW4tc3BhbiIpLCAidGFibGV0LXBvcnRyYWl0LSIuY29uY2F0KHRoaXMuc3BhbnMudGFibGV0UG9ydHJhaXQsICItY29sdW1uLXNwYW4iKSwgInRhYmxldC1sYW5kc2NhcGUtIi5jb25jYXQodGhpcy5zcGFucy50YWJsZXRMYW5kc2NhcGUsICItY29sdW1uLXNwYW4iKSwgImRlc2t0b3Atc3RhbmRhcmQtIi5jb25jYXQodGhpcy5zcGFucy5kZXNrdG9wU3RhbmRhcmQsICItY29sdW1uLXNwYW4iKSwgImRlc2t0b3Atd2lkZS0iLmNvbmNhdCh0aGlzLnNwYW5zLmRlc2t0b3BXaWRlLCAiLWNvbHVtbi1zcGFuIildOwogICAgfSwKCiAgICAvKioKICAgICAqIEdldCB0aGUgbnVtYmVyIG9mIGNvbHVtbnMgdG8gc3BhbiBmb3IgZWFjaCBkZXZpY2UgY2F0ZWdvcnkuCiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBhIG1hcHBpbmcgb2YgZGV2aWNlIGNhdGVnb3J5IGFuZCBjb2x1bW4gc3BhbnMKICAgICAqLwogICAgc3BhbnM6IGZ1bmN0aW9uIHNwYW5zKCkgewogICAgICB2YXIgc3BhblNldCA9IHRoaXMuc3BhblNldDsKICAgICAgdmFyIGNvdW50ID0gc3BhblNldC5sZW5ndGg7IC8vIFN0YXJ0IHdpdGggbnVsbAoKICAgICAgdmFyIHBob25lID0gbnVsbDsKICAgICAgdmFyIHRhYmxldCA9IG51bGw7CiAgICAgIHZhciB0YWJsZXRQb3J0cmFpdCA9IG51bGw7CiAgICAgIHZhciB0YWJsZXRMYW5kc2NhcGUgPSBudWxsOwogICAgICB2YXIgZGVza3RvcCA9IG51bGw7CiAgICAgIHZhciBkZXNrdG9wU3RhbmRhcmQgPSBudWxsOwogICAgICB2YXIgZGVza3RvcFdpZGUgPSBudWxsOyAvLyBBc3NpZ24gbGlzdCBpdGVtcwoKICAgICAgc3dpdGNoIChjb3VudCkgewogICAgICAgIGNhc2UgMToKICAgICAgICAgIHZhciBfc3BhblNldCA9IF9zbGljZWRUb0FycmF5KHNwYW5TZXQsIDEpOwoKICAgICAgICAgIGRlc2t0b3AgPSBfc3BhblNldFswXTsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlIDI6CiAgICAgICAgICB2YXIgX3NwYW5TZXQyID0gX3NsaWNlZFRvQXJyYXkoc3BhblNldCwgMik7CgogICAgICAgICAgcGhvbmUgPSBfc3BhblNldDJbMF07CiAgICAgICAgICBkZXNrdG9wID0gX3NwYW5TZXQyWzFdOwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgMzoKICAgICAgICAgIHZhciBfc3BhblNldDMgPSBfc2xpY2VkVG9BcnJheShzcGFuU2V0LCAzKTsKCiAgICAgICAgICBwaG9uZSA9IF9zcGFuU2V0M1swXTsKICAgICAgICAgIHRhYmxldCA9IF9zcGFuU2V0M1sxXTsKICAgICAgICAgIGRlc2t0b3AgPSBfc3BhblNldDNbMl07CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSA0OgogICAgICAgICAgdmFyIF9zcGFuU2V0NCA9IF9zbGljZWRUb0FycmF5KHNwYW5TZXQsIDQpOwoKICAgICAgICAgIHBob25lID0gX3NwYW5TZXQ0WzBdOwogICAgICAgICAgdGFibGV0ID0gX3NwYW5TZXQ0WzFdOwogICAgICAgICAgZGVza3RvcFN0YW5kYXJkID0gX3NwYW5TZXQ0WzJdOwogICAgICAgICAgZGVza3RvcFdpZGUgPSBfc3BhblNldDRbM107CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSA1OgogICAgICAgICAgdmFyIF9zcGFuU2V0NSA9IF9zbGljZWRUb0FycmF5KHNwYW5TZXQsIDUpOwoKICAgICAgICAgIHBob25lID0gX3NwYW5TZXQ1WzBdOwogICAgICAgICAgdGFibGV0UG9ydHJhaXQgPSBfc3BhblNldDVbMV07CiAgICAgICAgICB0YWJsZXRMYW5kc2NhcGUgPSBfc3BhblNldDVbMl07CiAgICAgICAgICBkZXNrdG9wU3RhbmRhcmQgPSBfc3BhblNldDVbM107CiAgICAgICAgICBkZXNrdG9wV2lkZSA9IF9zcGFuU2V0NVs0XTsKICAgICAgICAgIGJyZWFrOwogICAgICB9IC8vIEZhbGwgYmFjayBmb3IgZW1wdHkgdmFsdWVzCgoKICAgICAgcGhvbmUgPSBwaG9uZSB8fCAxMjsKICAgICAgdGFibGV0UG9ydHJhaXQgPSB0YWJsZXRQb3J0cmFpdCB8fCB0YWJsZXQgfHwgcGhvbmU7CiAgICAgIHRhYmxldExhbmRzY2FwZSA9IHRhYmxldExhbmRzY2FwZSB8fCB0YWJsZXQgfHwgZGVza3RvcDsKICAgICAgZGVza3RvcFN0YW5kYXJkID0gZGVza3RvcFN0YW5kYXJkIHx8IGRlc2t0b3A7CiAgICAgIGRlc2t0b3BXaWRlID0gZGVza3RvcFdpZGUgfHwgZGVza3RvcDsKICAgICAgcmV0dXJuIHsKICAgICAgICBwaG9uZTogcGhvbmUsCiAgICAgICAgdGFibGV0UG9ydHJhaXQ6IHRhYmxldFBvcnRyYWl0LAogICAgICAgIHRhYmxldExhbmRzY2FwZTogdGFibGV0TGFuZHNjYXBlLAogICAgICAgIGRlc2t0b3BTdGFuZGFyZDogZGVza3RvcFN0YW5kYXJkLAogICAgICAgIGRlc2t0b3BXaWRlOiBkZXNrdG9wV2lkZQogICAgICB9OwogICAgfQogIH0KfTs="},{"version":3,"sources":["Cell.vue"],"names":[],"mappings":";;;;;;;;;;AAQA;;;AAGA,eAAA;AACA,EAAA,IAAA,EAAA,MADA;AACA;AACA,EAAA,KAAA,EAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,IAAA,OAAA,EAAA;AACA,MAAA,IAAA,EAAA,KADA;AAEA,MAAA,QAAA,EAAA,IAFA;AAGA,MAAA,SAAA,EAAA,mBAAA,GAAA;AAAA,eAAA,GAAA,CAAA,MAAA,IAAA,CAAA,IAAA,GAAA,CAAA,MAAA,IAAA,CAAA,IAAA,GAAA,CAAA,KAAA,CACA,UAAA,IAAA;AAAA,iBAAA,IAAA,IAAA,CAAA,IAAA,IAAA,IAAA,EAAA;AAAA,SADA,CAAA;AAAA;AAHA;AA9BA,GAFA;AAwCA,EAAA,QAAA,EAAA;AACA;;;;AAIA,IAAA,WAAA,EAAA,uBAAA;AACA,aAAA,iBACA,KAAA,KAAA,CAAA,KADA,6CAEA,KAAA,KAAA,CAAA,cAFA,8CAGA,KAAA,KAAA,CAAA,eAHA,8CAIA,KAAA,KAAA,CAAA,eAJA,0CAKA,KAAA,KAAA,CAAA,WALA,kBAAA;AAOA,KAbA;;AAeA;;;;AAIA,IAAA,KAAA,EAAA,iBAAA;AACA,UAAA,OAAA,GAAA,KAAA,OAAA;AACA,UAAA,KAAA,GAAA,OAAA,CAAA,MAAA,CAFA,CAIA;;AACA,UAAA,KAAA,GAAA,IAAA;AAEA,UAAA,MAAA,GAAA,IAAA;AACA,UAAA,cAAA,GAAA,IAAA;AACA,UAAA,eAAA,GAAA,IAAA;AAEA,UAAA,OAAA,GAAA,IAAA;AACA,UAAA,eAAA,GAAA,IAAA;AACA,UAAA,WAAA,GAAA,IAAA,CAbA,CAeA;;AACA,cAAA,KAAA;AACA,aAAA,CAAA;AAAA,wCAGA,OAHA;;AAEA,UAAA,OAFA;AAIA;;AACA,aAAA,CAAA;AAAA,yCAIA,OAJA;;AAEA,UAAA,KAFA;AAGA,UAAA,OAHA;AAKA;;AACA,aAAA,CAAA;AAAA,yCAKA,OALA;;AAEA,UAAA,KAFA;AAGA,UAAA,MAHA;AAIA,UAAA,OAJA;AAMA;;AACA,aAAA,CAAA;AAAA,yCAMA,OANA;;AAEA,UAAA,KAFA;AAGA,UAAA,MAHA;AAIA,UAAA,eAJA;AAKA,UAAA,WALA;AAOA;;AACA,aAAA,CAAA;AAAA,yCAOA,OAPA;;AAEA,UAAA,KAFA;AAGA,UAAA,cAHA;AAIA,UAAA,eAJA;AAKA,UAAA,eALA;AAMA,UAAA,WANA;AAQA;AAnCA,OAhBA,CAsDA;;;AACA,MAAA,KAAA,GAAA,KAAA,IAAA,EAAA;AAEA,MAAA,cAAA,GAAA,cAAA,IAAA,MAAA,IAAA,KAAA;AACA,MAAA,eAAA,GAAA,eAAA,IAAA,MAAA,IAAA,OAAA;AAEA,MAAA,eAAA,GAAA,eAAA,IAAA,OAAA;AACA,MAAA,WAAA,GAAA,WAAA,IAAA,OAAA;AAEA,aAAA;AACA,QAAA,KAAA,EAAA,KADA;AAEA,QAAA,cAAA,EAAA,cAFA;AAGA,QAAA,eAAA,EAAA,eAHA;AAIA,QAAA,eAAA,EAAA,eAJA;AAKA,QAAA,WAAA,EAAA;AALA,OAAA;AAOA;AAzFA;AAxCA,CAAA","sourcesContent":["<template>\n  <div class=\"cell\" :class=\"cellClasses\">\n    <!-- @slot Content goes here -->\n    <slot>&nbsp;</slot>\n  </div>\n</template>\n\n<script>\n  /**\n   * This component is one cell in a grid layout.\n   */\n  export default {\n    name: 'Cell', // Always use as Grid.Cell\n    props: {\n      /**\n       * _the number of slices this column should span on different devices_\n       *\n       * Note that in a 12-slice grid, the number of columns that can be\n       * accommodated is 12 / span.\n       *\n       * Other than desktop, all values have a default and will be resolved as\n       * follows. On phones and tablets in portrait orientation, the cell\n       * occupies all twelve slices. Tablets in landscape orientation and big\n       * desktops fall back to the slices configured for the standard desktop.\n       *\n       * With these fallbacks in mind, depending on the length of the array,\n       * the values are interpreted differently.\n       *\n       * [a=desktop]\n       * is interpreted as [12, 12, a, a, a]\n       *\n       * [a=phone, b=desktop]\n       * is interpreted as [a a, b, b, b]\n       *\n       * [a=phone, b=tablet, c=desktop]\n       * is interpreted as [a, b, b, c, c]\n       *\n       * [a=phone, b=tablet, c=desktop-standard, d=desktop-wide]\n       * is interpreted as [a, b, b, c, d]\n       *\n       * [a=phone, b=tablet-portrait, c=tablet-landscape, d=desktop-standard, e=desktop-wide]\n       * is interpreted as [a, b, c, d, e]\n       */\n      spanSet: {\n        type: Array,\n        required: true,\n        validator: val => val.length >= 1 && val.length <= 5 && val.every(\n          span => span >= 1 && span <= 12\n        )\n      }\n    },\n    computed: {\n      /**\n       * Get the classes to use on the grid cell.\n       * @returns {Array} an array of all the classes to apply on the element\n       */\n      cellClasses: function () {\n        return [\n          `phone-${this.spans.phone}-column-span`,\n          `tablet-portrait-${this.spans.tabletPortrait}-column-span`,\n          `tablet-landscape-${this.spans.tabletLandscape}-column-span`,\n          `desktop-standard-${this.spans.desktopStandard}-column-span`,\n          `desktop-wide-${this.spans.desktopWide}-column-span`\n        ]\n      },\n\n      /**\n       * Get the number of columns to span for each device category.\n       * @returns {Object} a mapping of device category and column spans\n       */\n      spans: function () {\n        const spanSet = this.spanSet\n        const count = spanSet.length\n\n        // Start with null\n        let phone = null\n\n        let tablet = null\n        let tabletPortrait = null\n        let tabletLandscape = null\n\n        let desktop = null\n        let desktopStandard = null\n        let desktopWide = null\n\n        // Assign list items\n        switch (count) {\n          case 1:\n            [\n              desktop\n            ] = spanSet\n            break\n          case 2:\n            [\n              phone,\n              desktop\n            ] = spanSet\n            break\n          case 3:\n            [\n              phone,\n              tablet,\n              desktop\n            ] = spanSet\n            break\n          case 4:\n            [\n              phone,\n              tablet,\n              desktopStandard,\n              desktopWide\n            ] = spanSet\n            break\n          case 5:\n            [\n              phone,\n              tabletPortrait,\n              tabletLandscape,\n              desktopStandard,\n              desktopWide\n            ] = spanSet\n            break\n        }\n\n        // Fall back for empty values\n        phone = phone || 12\n\n        tabletPortrait = tabletPortrait || tablet || phone\n        tabletLandscape = tabletLandscape || tablet || desktop\n\n        desktopStandard = desktopStandard || desktop\n        desktopWide = desktopWide || desktop\n\n        return {\n          phone,\n          tabletPortrait,\n          tabletLandscape,\n          desktopStandard,\n          desktopWide\n        }\n      }\n    }\n  }\n</script>\n\n<style scoped lang=\"scss\" src=\"./Cell.scss\"/>\n"],"sourceRoot":"src/components/layout/grid/pieces/cell"}]}