{"remainingRequest":"/Users/msfew/Downloads/portfolio-master/node_modules/babel-loader/lib/index.js!/Users/msfew/Downloads/portfolio-master/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/msfew/Downloads/portfolio-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/msfew/Downloads/portfolio-master/src/components/layout/grid/pieces/cell/Cell.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/msfew/Downloads/portfolio-master/src/components/layout/grid/pieces/cell/Cell.vue","mtime":1617939276000},{"path":"/Users/msfew/Downloads/portfolio-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/msfew/Downloads/portfolio-master/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/msfew/Downloads/portfolio-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/msfew/Downloads/portfolio-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZXZlcnkiOwppbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSAiL1VzZXJzL21zZmV3L0Rvd25sb2Fkcy9wb3J0Zm9saW8tbWFzdGVyL25vZGVfbW9kdWxlcy9AdnVlL2JhYmVsLXByZXNldC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXkiOwovLwovLwovLwovLwovLwovLwovLwoKLyoqCiAqIFRoaXMgY29tcG9uZW50IGlzIG9uZSBjZWxsIGluIGEgZ3JpZCBsYXlvdXQuCiAqLwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ0NlbGwnLAogIC8vIEFsd2F5cyB1c2UgYXMgR3JpZC5DZWxsCiAgcHJvcHM6IHsKICAgIC8qKgogICAgICogX3RoZSBudW1iZXIgb2Ygc2xpY2VzIHRoaXMgY29sdW1uIHNob3VsZCBzcGFuIG9uIGRpZmZlcmVudCBkZXZpY2VzXwogICAgICoKICAgICAqIE5vdGUgdGhhdCBpbiBhIDEyLXNsaWNlIGdyaWQsIHRoZSBudW1iZXIgb2YgY29sdW1ucyB0aGF0IGNhbiBiZQogICAgICogYWNjb21tb2RhdGVkIGlzIDEyIC8gc3Bhbi4KICAgICAqCiAgICAgKiBPdGhlciB0aGFuIGRlc2t0b3AsIGFsbCB2YWx1ZXMgaGF2ZSBhIGRlZmF1bHQgYW5kIHdpbGwgYmUgcmVzb2x2ZWQgYXMKICAgICAqIGZvbGxvd3MuIE9uIHBob25lcyBhbmQgdGFibGV0cyBpbiBwb3J0cmFpdCBvcmllbnRhdGlvbiwgdGhlIGNlbGwKICAgICAqIG9jY3VwaWVzIGFsbCB0d2VsdmUgc2xpY2VzLiBUYWJsZXRzIGluIGxhbmRzY2FwZSBvcmllbnRhdGlvbiBhbmQgYmlnCiAgICAgKiBkZXNrdG9wcyBmYWxsIGJhY2sgdG8gdGhlIHNsaWNlcyBjb25maWd1cmVkIGZvciB0aGUgc3RhbmRhcmQgZGVza3RvcC4KICAgICAqCiAgICAgKiBXaXRoIHRoZXNlIGZhbGxiYWNrcyBpbiBtaW5kLCBkZXBlbmRpbmcgb24gdGhlIGxlbmd0aCBvZiB0aGUgYXJyYXksCiAgICAgKiB0aGUgdmFsdWVzIGFyZSBpbnRlcnByZXRlZCBkaWZmZXJlbnRseS4KICAgICAqCiAgICAgKiBbYT1kZXNrdG9wXQogICAgICogaXMgaW50ZXJwcmV0ZWQgYXMgWzEyLCAxMiwgYSwgYSwgYV0KICAgICAqCiAgICAgKiBbYT1waG9uZSwgYj1kZXNrdG9wXQogICAgICogaXMgaW50ZXJwcmV0ZWQgYXMgW2EgYSwgYiwgYiwgYl0KICAgICAqCiAgICAgKiBbYT1waG9uZSwgYj10YWJsZXQsIGM9ZGVza3RvcF0KICAgICAqIGlzIGludGVycHJldGVkIGFzIFthLCBiLCBiLCBjLCBjXQogICAgICoKICAgICAqIFthPXBob25lLCBiPXRhYmxldCwgYz1kZXNrdG9wLXN0YW5kYXJkLCBkPWRlc2t0b3Atd2lkZV0KICAgICAqIGlzIGludGVycHJldGVkIGFzIFthLCBiLCBiLCBjLCBkXQogICAgICoKICAgICAqIFthPXBob25lLCBiPXRhYmxldC1wb3J0cmFpdCwgYz10YWJsZXQtbGFuZHNjYXBlLCBkPWRlc2t0b3Atc3RhbmRhcmQsIGU9ZGVza3RvcC13aWRlXQogICAgICogaXMgaW50ZXJwcmV0ZWQgYXMgW2EsIGIsIGMsIGQsIGVdCiAgICAgKi8KICAgIHNwYW5TZXQ6IHsKICAgICAgdHlwZTogQXJyYXksCiAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uIHZhbGlkYXRvcih2YWwpIHsKICAgICAgICByZXR1cm4gdmFsLmxlbmd0aCA+PSAxICYmIHZhbC5sZW5ndGggPD0gNSAmJiB2YWwuZXZlcnkoZnVuY3Rpb24gKHNwYW4pIHsKICAgICAgICAgIHJldHVybiBzcGFuID49IDEgJiYgc3BhbiA8PSAxMjsKICAgICAgICB9KTsKICAgICAgfQogICAgfQogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIC8qKgogICAgICogR2V0IHRoZSBjbGFzc2VzIHRvIHVzZSBvbiB0aGUgZ3JpZCBjZWxsLgogICAgICogQHJldHVybnMge0FycmF5fSBhbiBhcnJheSBvZiBhbGwgdGhlIGNsYXNzZXMgdG8gYXBwbHkgb24gdGhlIGVsZW1lbnQKICAgICAqLwogICAgY2VsbENsYXNzZXM6IGZ1bmN0aW9uIGNlbGxDbGFzc2VzKCkgewogICAgICByZXR1cm4gWyJwaG9uZS0iLmNvbmNhdCh0aGlzLnNwYW5zLnBob25lLCAiLWNvbHVtbi1zcGFuIiksICJ0YWJsZXQtcG9ydHJhaXQtIi5jb25jYXQodGhpcy5zcGFucy50YWJsZXRQb3J0cmFpdCwgIi1jb2x1bW4tc3BhbiIpLCAidGFibGV0LWxhbmRzY2FwZS0iLmNvbmNhdCh0aGlzLnNwYW5zLnRhYmxldExhbmRzY2FwZSwgIi1jb2x1bW4tc3BhbiIpLCAiZGVza3RvcC1zdGFuZGFyZC0iLmNvbmNhdCh0aGlzLnNwYW5zLmRlc2t0b3BTdGFuZGFyZCwgIi1jb2x1bW4tc3BhbiIpLCAiZGVza3RvcC13aWRlLSIuY29uY2F0KHRoaXMuc3BhbnMuZGVza3RvcFdpZGUsICItY29sdW1uLXNwYW4iKV07CiAgICB9LAoKICAgIC8qKgogICAgICogR2V0IHRoZSBudW1iZXIgb2YgY29sdW1ucyB0byBzcGFuIGZvciBlYWNoIGRldmljZSBjYXRlZ29yeS4KICAgICAqIEByZXR1cm5zIHtPYmplY3R9IGEgbWFwcGluZyBvZiBkZXZpY2UgY2F0ZWdvcnkgYW5kIGNvbHVtbiBzcGFucwogICAgICovCiAgICBzcGFuczogZnVuY3Rpb24gc3BhbnMoKSB7CiAgICAgIHZhciBzcGFuU2V0ID0gdGhpcy5zcGFuU2V0OwogICAgICB2YXIgY291bnQgPSBzcGFuU2V0Lmxlbmd0aDsgLy8gU3RhcnQgd2l0aCBudWxsCgogICAgICB2YXIgcGhvbmUgPSBudWxsOwogICAgICB2YXIgdGFibGV0ID0gbnVsbDsKICAgICAgdmFyIHRhYmxldFBvcnRyYWl0ID0gbnVsbDsKICAgICAgdmFyIHRhYmxldExhbmRzY2FwZSA9IG51bGw7CiAgICAgIHZhciBkZXNrdG9wID0gbnVsbDsKICAgICAgdmFyIGRlc2t0b3BTdGFuZGFyZCA9IG51bGw7CiAgICAgIHZhciBkZXNrdG9wV2lkZSA9IG51bGw7IC8vIEFzc2lnbiBsaXN0IGl0ZW1zCgogICAgICBzd2l0Y2ggKGNvdW50KSB7CiAgICAgICAgY2FzZSAxOgogICAgICAgICAgdmFyIF9zcGFuU2V0ID0gX3NsaWNlZFRvQXJyYXkoc3BhblNldCwgMSk7CgogICAgICAgICAgZGVza3RvcCA9IF9zcGFuU2V0WzBdOwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgMjoKICAgICAgICAgIHZhciBfc3BhblNldDIgPSBfc2xpY2VkVG9BcnJheShzcGFuU2V0LCAyKTsKCiAgICAgICAgICBwaG9uZSA9IF9zcGFuU2V0MlswXTsKICAgICAgICAgIGRlc2t0b3AgPSBfc3BhblNldDJbMV07CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSAzOgogICAgICAgICAgdmFyIF9zcGFuU2V0MyA9IF9zbGljZWRUb0FycmF5KHNwYW5TZXQsIDMpOwoKICAgICAgICAgIHBob25lID0gX3NwYW5TZXQzWzBdOwogICAgICAgICAgdGFibGV0ID0gX3NwYW5TZXQzWzFdOwogICAgICAgICAgZGVza3RvcCA9IF9zcGFuU2V0M1syXTsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlIDQ6CiAgICAgICAgICB2YXIgX3NwYW5TZXQ0ID0gX3NsaWNlZFRvQXJyYXkoc3BhblNldCwgNCk7CgogICAgICAgICAgcGhvbmUgPSBfc3BhblNldDRbMF07CiAgICAgICAgICB0YWJsZXQgPSBfc3BhblNldDRbMV07CiAgICAgICAgICBkZXNrdG9wU3RhbmRhcmQgPSBfc3BhblNldDRbMl07CiAgICAgICAgICBkZXNrdG9wV2lkZSA9IF9zcGFuU2V0NFszXTsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlIDU6CiAgICAgICAgICB2YXIgX3NwYW5TZXQ1ID0gX3NsaWNlZFRvQXJyYXkoc3BhblNldCwgNSk7CgogICAgICAgICAgcGhvbmUgPSBfc3BhblNldDVbMF07CiAgICAgICAgICB0YWJsZXRQb3J0cmFpdCA9IF9zcGFuU2V0NVsxXTsKICAgICAgICAgIHRhYmxldExhbmRzY2FwZSA9IF9zcGFuU2V0NVsyXTsKICAgICAgICAgIGRlc2t0b3BTdGFuZGFyZCA9IF9zcGFuU2V0NVszXTsKICAgICAgICAgIGRlc2t0b3BXaWRlID0gX3NwYW5TZXQ1WzRdOwogICAgICAgICAgYnJlYWs7CiAgICAgIH0gLy8gRmFsbCBiYWNrIGZvciBlbXB0eSB2YWx1ZXMKCgogICAgICBwaG9uZSA9IHBob25lIHx8IDEyOwogICAgICB0YWJsZXRQb3J0cmFpdCA9IHRhYmxldFBvcnRyYWl0IHx8IHRhYmxldCB8fCBwaG9uZTsKICAgICAgdGFibGV0TGFuZHNjYXBlID0gdGFibGV0TGFuZHNjYXBlIHx8IHRhYmxldCB8fCBkZXNrdG9wOwogICAgICBkZXNrdG9wU3RhbmRhcmQgPSBkZXNrdG9wU3RhbmRhcmQgfHwgZGVza3RvcDsKICAgICAgZGVza3RvcFdpZGUgPSBkZXNrdG9wV2lkZSB8fCBkZXNrdG9wOwogICAgICByZXR1cm4gewogICAgICAgIHBob25lOiBwaG9uZSwKICAgICAgICB0YWJsZXRQb3J0cmFpdDogdGFibGV0UG9ydHJhaXQsCiAgICAgICAgdGFibGV0TGFuZHNjYXBlOiB0YWJsZXRMYW5kc2NhcGUsCiAgICAgICAgZGVza3RvcFN0YW5kYXJkOiBkZXNrdG9wU3RhbmRhcmQsCiAgICAgICAgZGVza3RvcFdpZGU6IGRlc2t0b3BXaWRlCiAgICAgIH07CiAgICB9CiAgfQp9Ow=="},{"version":3,"sources":["Cell.vue"],"names":[],"mappings":";;;;;;;;;;AAQA;;;AAGA,eAAA;AACA,EAAA,IAAA,EAAA,MADA;AACA;AACA,EAAA,KAAA,EAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,IAAA,OAAA,EAAA;AACA,MAAA,IAAA,EAAA,KADA;AAEA,MAAA,QAAA,EAAA,IAFA;AAGA,MAAA,SAAA,EAAA,mBAAA,GAAA;AAAA,eAAA,GAAA,CAAA,MAAA,IAAA,CAAA,IAAA,GAAA,CAAA,MAAA,IAAA,CAAA,IAAA,GAAA,CAAA,KAAA,CACA,UAAA,IAAA;AAAA,iBAAA,IAAA,IAAA,CAAA,IAAA,IAAA,IAAA,EAAA;AAAA,SADA,CAAA;AAAA;AAHA;AA9BA,GAFA;AAwCA,EAAA,QAAA,EAAA;AACA;;;;AAIA,IAAA,WAAA,EAAA,uBAAA;AACA,aAAA,iBACA,KAAA,KAAA,CAAA,KADA,6CAEA,KAAA,KAAA,CAAA,cAFA,8CAGA,KAAA,KAAA,CAAA,eAHA,8CAIA,KAAA,KAAA,CAAA,eAJA,0CAKA,KAAA,KAAA,CAAA,WALA,kBAAA;AAOA,KAbA;;AAeA;;;;AAIA,IAAA,KAAA,EAAA,iBAAA;AACA,UAAA,OAAA,GAAA,KAAA,OAAA;AACA,UAAA,KAAA,GAAA,OAAA,CAAA,MAAA,CAFA,CAIA;;AACA,UAAA,KAAA,GAAA,IAAA;AAEA,UAAA,MAAA,GAAA,IAAA;AACA,UAAA,cAAA,GAAA,IAAA;AACA,UAAA,eAAA,GAAA,IAAA;AAEA,UAAA,OAAA,GAAA,IAAA;AACA,UAAA,eAAA,GAAA,IAAA;AACA,UAAA,WAAA,GAAA,IAAA,CAbA,CAeA;;AACA,cAAA,KAAA;AACA,aAAA,CAAA;AAAA,wCAGA,OAHA;;AAEA,UAAA,OAFA;AAIA;;AACA,aAAA,CAAA;AAAA,yCAIA,OAJA;;AAEA,UAAA,KAFA;AAGA,UAAA,OAHA;AAKA;;AACA,aAAA,CAAA;AAAA,yCAKA,OALA;;AAEA,UAAA,KAFA;AAGA,UAAA,MAHA;AAIA,UAAA,OAJA;AAMA;;AACA,aAAA,CAAA;AAAA,yCAMA,OANA;;AAEA,UAAA,KAFA;AAGA,UAAA,MAHA;AAIA,UAAA,eAJA;AAKA,UAAA,WALA;AAOA;;AACA,aAAA,CAAA;AAAA,yCAOA,OAPA;;AAEA,UAAA,KAFA;AAGA,UAAA,cAHA;AAIA,UAAA,eAJA;AAKA,UAAA,eALA;AAMA,UAAA,WANA;AAQA;AAnCA,OAhBA,CAsDA;;;AACA,MAAA,KAAA,GAAA,KAAA,IAAA,EAAA;AAEA,MAAA,cAAA,GAAA,cAAA,IAAA,MAAA,IAAA,KAAA;AACA,MAAA,eAAA,GAAA,eAAA,IAAA,MAAA,IAAA,OAAA;AAEA,MAAA,eAAA,GAAA,eAAA,IAAA,OAAA;AACA,MAAA,WAAA,GAAA,WAAA,IAAA,OAAA;AAEA,aAAA;AACA,QAAA,KAAA,EAAA,KADA;AAEA,QAAA,cAAA,EAAA,cAFA;AAGA,QAAA,eAAA,EAAA,eAHA;AAIA,QAAA,eAAA,EAAA,eAJA;AAKA,QAAA,WAAA,EAAA;AALA,OAAA;AAOA;AAzFA;AAxCA,CAAA","sourcesContent":["<template>\n  <div class=\"cell\" :class=\"cellClasses\">\n    <!-- @slot Content goes here -->\n    <slot>&nbsp;</slot>\n  </div>\n</template>\n\n<script>\n  /**\n   * This component is one cell in a grid layout.\n   */\n  export default {\n    name: 'Cell', // Always use as Grid.Cell\n    props: {\n      /**\n       * _the number of slices this column should span on different devices_\n       *\n       * Note that in a 12-slice grid, the number of columns that can be\n       * accommodated is 12 / span.\n       *\n       * Other than desktop, all values have a default and will be resolved as\n       * follows. On phones and tablets in portrait orientation, the cell\n       * occupies all twelve slices. Tablets in landscape orientation and big\n       * desktops fall back to the slices configured for the standard desktop.\n       *\n       * With these fallbacks in mind, depending on the length of the array,\n       * the values are interpreted differently.\n       *\n       * [a=desktop]\n       * is interpreted as [12, 12, a, a, a]\n       *\n       * [a=phone, b=desktop]\n       * is interpreted as [a a, b, b, b]\n       *\n       * [a=phone, b=tablet, c=desktop]\n       * is interpreted as [a, b, b, c, c]\n       *\n       * [a=phone, b=tablet, c=desktop-standard, d=desktop-wide]\n       * is interpreted as [a, b, b, c, d]\n       *\n       * [a=phone, b=tablet-portrait, c=tablet-landscape, d=desktop-standard, e=desktop-wide]\n       * is interpreted as [a, b, c, d, e]\n       */\n      spanSet: {\n        type: Array,\n        required: true,\n        validator: val => val.length >= 1 && val.length <= 5 && val.every(\n          span => span >= 1 && span <= 12\n        )\n      }\n    },\n    computed: {\n      /**\n       * Get the classes to use on the grid cell.\n       * @returns {Array} an array of all the classes to apply on the element\n       */\n      cellClasses: function () {\n        return [\n          `phone-${this.spans.phone}-column-span`,\n          `tablet-portrait-${this.spans.tabletPortrait}-column-span`,\n          `tablet-landscape-${this.spans.tabletLandscape}-column-span`,\n          `desktop-standard-${this.spans.desktopStandard}-column-span`,\n          `desktop-wide-${this.spans.desktopWide}-column-span`\n        ]\n      },\n\n      /**\n       * Get the number of columns to span for each device category.\n       * @returns {Object} a mapping of device category and column spans\n       */\n      spans: function () {\n        const spanSet = this.spanSet\n        const count = spanSet.length\n\n        // Start with null\n        let phone = null\n\n        let tablet = null\n        let tabletPortrait = null\n        let tabletLandscape = null\n\n        let desktop = null\n        let desktopStandard = null\n        let desktopWide = null\n\n        // Assign list items\n        switch (count) {\n          case 1:\n            [\n              desktop\n            ] = spanSet\n            break\n          case 2:\n            [\n              phone,\n              desktop\n            ] = spanSet\n            break\n          case 3:\n            [\n              phone,\n              tablet,\n              desktop\n            ] = spanSet\n            break\n          case 4:\n            [\n              phone,\n              tablet,\n              desktopStandard,\n              desktopWide\n            ] = spanSet\n            break\n          case 5:\n            [\n              phone,\n              tabletPortrait,\n              tabletLandscape,\n              desktopStandard,\n              desktopWide\n            ] = spanSet\n            break\n        }\n\n        // Fall back for empty values\n        phone = phone || 12\n\n        tabletPortrait = tabletPortrait || tablet || phone\n        tabletLandscape = tabletLandscape || tablet || desktop\n\n        desktopStandard = desktopStandard || desktop\n        desktopWide = desktopWide || desktop\n\n        return {\n          phone,\n          tabletPortrait,\n          tabletLandscape,\n          desktopStandard,\n          desktopWide\n        }\n      }\n    }\n  }\n</script>\n\n<style scoped lang=\"scss\" src=\"./Cell.scss\"/>\n"],"sourceRoot":"src/components/layout/grid/pieces/cell"}]}