{"remainingRequest":"/Users/msfew/portfolio/node_modules/babel-loader/lib/index.js!/Users/msfew/portfolio/node_modules/eslint-loader/index.js??ref--13-0!/Users/msfew/portfolio/src/store/support/tree.js","dependencies":[{"path":"/Users/msfew/portfolio/src/store/support/tree.js","mtime":1615276825503},{"path":"/Users/msfew/portfolio/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/msfew/portfolio/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/msfew/portfolio/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZXZlcnkiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mb3ItZWFjaCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluY2x1ZGVzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5mcmVlemUiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudmFsdWVzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmluY2x1ZGVzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaCI7CmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAiL1VzZXJzL21zZmV3L3BvcnRmb2xpby9ub2RlX21vZHVsZXMvQHZ1ZS9iYWJlbC1wcmVzZXQtYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjayI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiL1VzZXJzL21zZmV3L3BvcnRmb2xpby9ub2RlX21vZHVsZXMvQHZ1ZS9iYWJlbC1wcmVzZXQtYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcyI7CmltcG9ydCBhc3NlcnQgZnJvbSAnYXNzZXJ0JzsKdmFyIG5vZGVUeXBlID0gT2JqZWN0LmZyZWV6ZSh7CiAgRk9MREVSOiAnZm9sZGVyJywKICBGSUxFOiAnZmlsZScKfSk7Ci8qKgogKiBBIGNsYXNzIHRoYXQgaW1wbGVtZW50cyBvbmUgbm9kZSBpbiBhIGZpbGUtc3lzdGVtIHRyZWUuIEVhY2ggbm9kZSBtYXkgZWl0aGVyCiAqIGJlIGEgZmlsZSBvciBhIGZvbGRlciBhbmQgbWF5IGhhdmUgY2hpbGRyZW4gaWYgaXQgaXMgYSBmb2xkZXIuCiAqLwoKdmFyIE5vZGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIC8qKgogICAqIENyZWF0ZSBhIG5ldyBvYmplY3Qgb2YgY2xhc3MgTm9kZS4KICAgKgogICAqIEBjb25zdHJ1Y3RvcgogICAqIEBjb25zdHJ1Y3RzIHtOb2RlfQogICAqCiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSB3aGV0aGVyIHRoZSBub2RlIHJlcHJlc2VudHMgYSBmaWxlIG9yIGEgZm9sZGVyCiAgICogQHBhcmFtIHtzdHJpbmd9IGljb24gLSB0aGUgaWNvbiBhc3NvY2lhdGVkIHdpdGggdGhlIE5vZGUKICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIHRoZSBuYW1lIG9mIHRoZSBOb2RlCiAgICogQHBhcmFtIHtBcnJheX0gYWxpYXNlcyAtIHRoZSBsaXN0IG9mIGFsdGVybmF0aXZlIG5hbWVzIG9mIHRoZSBOb2RlCiAgICovCiAgZnVuY3Rpb24gTm9kZSh0eXBlLCBpY29uLCBuYW1lKSB7CiAgICB2YXIgYWxpYXNlcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogW107CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE5vZGUpOwoKICAgIGFzc2VydChPYmplY3QudmFsdWVzKG5vZGVUeXBlKS5pbmNsdWRlcyh0eXBlKSk7CiAgICB0aGlzLnR5cGUgPSB0eXBlOwogICAgdGhpcy5pY29uID0gaWNvbjsKICAgIHRoaXMubmFtZSA9IG5hbWU7CiAgICB0aGlzLmFsaWFzZXMgPSBhbGlhc2VzOwogICAgdGhpcy5wYXJlbnQgPSBudWxsOwogICAgdGhpcy5jaGlsZHJlbiA9IFtdOwogIH0KICAvKioKICAgKiBDaGVjayBpZiB0aGUgZ2l2ZW4gbmFtZSBpcyBlaXRoZXIgdGhlIHByaW1hcnkgbmFtZSBvZiB0aGUgY3VycmVudCBub2RlIG9yCiAgICogb25lIG9mIGl0cyBhbGlhc2VzLgogICAqCiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSB0aGUgbmFtZSB3aGljaCBpcyB0byBiZSBjaGVja2VkIGZvciBhIG1hdGNoCiAgICogQHJldHVybnMge2Jvb2xlYW59IHdoZXRoZXIgdGhlIGdpdmVuIG5hbWUgaXMgb25lIG9mIHRoZSBOb2RlJ3MgdmFsaWQgbmFtZXMKICAgKi8KCgogIF9jcmVhdGVDbGFzcyhOb2RlLCBbewogICAga2V5OiAiaGFzTmFtZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaGFzTmFtZShuYW1lKSB7CiAgICAgIHJldHVybiB0aGlzLm5hbWUgPT09IG5hbWUgfHwgdGhpcy5hbGlhc2VzLmluY2x1ZGVzKG5hbWUudG9Mb2NhbGVMb3dlckNhc2UoKSk7CiAgICB9CiAgICAvKioKICAgICAqIE1ha2UgdGhlIGN1cnJlbnQgbm9kZSB0aGUgcm9vdCBub2RlIG9mIHRoZSB0cmVlLiBUaGUgcHJvcGVydHkgb2YgYSByb290CiAgICAgKiBub2RlIGlzIHRvIGJlIGl0cyBvd24gcGFyZW50LCBlc3NlbnRpYWxseSBhbGxvd2luZyBpbmZpbml0ZSB1cHdhcmQKICAgICAqIHRyYXZlcnNhbC4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJtYWtlUm9vdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gbWFrZVJvb3QoKSB7CiAgICAgIHRoaXMucGFyZW50ID0gdGhpczsKICAgIH0KICAgIC8qKgogICAgICogQWRkIHRoZSBnaXZlbiBub2RlIHRvIHRoZSBhcyBhIGNoaWxkIG9mIHRoZSBjdXJyZW50IG5vZGUuIEFsc28gdXBkYXRlcyB0aGUKICAgICAqIHJlZmVyZW5jZSB0byB0aGUgcGFyZW50IG5vZGUgaW4gdGhlIGNoaWxkIG9iamVjdC4KICAgICAqCiAgICAgKiBAcGFyYW0ge05vZGV9IG5vZGUgLSB0aGUgbm9kZSB0byBhcyBhIGNoaWxkIG9mIHRoZSBjdXJyZW50IG5vZGUKICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJhcHBlbmRDaGlsZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gYXBwZW5kQ2hpbGQobm9kZSkgewogICAgICB0aGlzLmNoaWxkcmVuLnB1c2gobm9kZSk7CiAgICAgIG5vZGUucGFyZW50ID0gdGhpczsKICAgIH0KICAgIC8qKgogICAgICogVHJhdmVyc2UgdGhlIHRyZWUgdXNpbmcgdGhlIERGVCBhbGdvcml0aG0uIFRoaXMgbWF5IGNvbnRyaWJ1dGUgdG8gYSBsb3NzCiAgICAgKiBpbiBwZXJmb3JtYW5jZSBidXQgaXQgcmVxdWlyZXMgbGVzcyBjb2RlLgogICAgICoKICAgICAqIFRoZSBhcmd1bWVudCB0byB0aGUgZnVuY3Rpb24gaXMgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgYSBub2RlIGFuZCByZXR1cm5zCiAgICAgKiBhIEJvb2xlYW4gdmFsdWUsIHdoaWNoIGlmIGZhbHN5LCBzdG9wcyBmdXJ0aGVyIHRyYXZlcnNhbC4KICAgICAqCiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmdW5jIC0gdGhlIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgb24gZWFjaCBub2RlCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAidHJhdmVyc2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHRyYXZlcnNlKGZ1bmMpIHsKICAgICAgdmFyIHNob3VsZENvbnRpbnVlID0gZnVuYyh0aGlzKTsKCiAgICAgIGlmICghc2hvdWxkQ29udGludWUpIHsKICAgICAgICByZXR1cm4gc2hvdWxkQ29udGludWU7CiAgICAgIH0KCiAgICAgIHRoaXMuY2hpbGRyZW4uZXZlcnkoZnVuY3Rpb24gKGNoaWxkKSB7CiAgICAgICAgc2hvdWxkQ29udGludWUgPSBjaGlsZC50cmF2ZXJzZShmdW5jKTsKICAgICAgICByZXR1cm4gc2hvdWxkQ29udGludWU7CiAgICAgIH0pOwogICAgICByZXR1cm4gc2hvdWxkQ29udGludWU7CiAgICB9CiAgICAvKioKICAgICAqIERldGVybWluZSB3aGV0aGVyIHRoaXMgbm9kZSByZXByZXNlbnRzIGEgZmlsZSBzeXN0ZW0gZm9sZGVyLgogICAgICoKICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IHdoZXRoZXIgdGhpcyBub2RlIHJlcHJlc2VudHMgYSBmaWxlIHN5c3RlbSBmb2xkZXIKICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJpc0ZvbGRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaXNGb2xkZXIoKSB7CiAgICAgIHJldHVybiB0aGlzLnR5cGUgPT09IG5vZGVUeXBlLkZPTERFUjsKICAgIH0KICAgIC8qKgogICAgICogRGV0ZXJtaW5lIHdoZXRoZXIgdGhpcyBub2RlIHJlcHJlc2VudHMgYSBmaWxlIHN5c3RlbSBmaWxlLgogICAgICoKICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IHdoZXRoZXIgdGhpcyBub2RlIHJlcHJlc2VudHMgYSBmaWxlIHN5c3RlbSBmaWxlCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiaXNGaWxlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBpc0ZpbGUoKSB7CiAgICAgIHJldHVybiB0aGlzLnR5cGUgPT09IG5vZGVUeXBlLkZJTEU7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gTm9kZTsKfSgpOwovKioKICogUGFyc2UgdGhlIGZpbGUgc3lzdGVtIHRyZWUsIGdpdmVuIGFzIGEgcGxhaW4gb2xkIEphdmFTY3JpcHQgb2JqZWN0IGludG8gYQogKiB0cmVlIG9mIE5vZGUgb2JqZWN0cyB3aXRoIHJpY2hlciBmdW5jdGlvbmFsaXR5LgogKgogKiBAcGFyYW0ge09iamVjdH0gcG9qbyAtIHRoZSBmaWxlIHN5c3RlbSB0cmVlIHBhcnNlZCBmcm9tIEpTT04KICogQHJldHVybiB7Tm9kZX0gdGhlIHJvb3Qgbm9kZSBvZiB0aGUgTm9kZSB0cmVlIGdlbmVyYXRlZCBmcm9tIHRoZSBvYmplY3QKICovCgoKZnVuY3Rpb24gcGFyc2UocG9qbykgewogIHZhciBub2RlID0gbmV3IE5vZGUocG9qby50eXBlLCBwb2pvLmljb24sIHBvam8ubmFtZSwgcG9qby5hbGlhc2VzKTsKCiAgaWYgKHBvam8uY2hpbGRyZW4gJiYgcG9qby5jaGlsZHJlbiBpbnN0YW5jZW9mIEFycmF5KSB7CiAgICBwb2pvLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkUG9qbykgewogICAgICBub2RlLmFwcGVuZENoaWxkKHBhcnNlKGNoaWxkUG9qbykpOwogICAgfSk7CiAgfQoKICByZXR1cm4gbm9kZTsKfQoKZXhwb3J0IHsgcGFyc2UgfTs="},{"version":3,"sources":["/Users/msfew/portfolio/src/store/support/tree.js"],"names":["assert","nodeType","Object","freeze","FOLDER","FILE","Node","type","icon","name","aliases","values","includes","parent","children","toLocaleLowerCase","node","push","func","shouldContinue","every","child","traverse","parse","pojo","Array","forEach","childPojo","appendChild"],"mappings":";;;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,QAAnB;AAEA,IAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAc;AAC7BC,EAAAA,MAAM,EAAE,QADqB;AAE7BC,EAAAA,IAAI,EAAE;AAFuB,CAAd,CAAjB;AAKA;;;;;IAIMC,I;AACJ;;;;;;;;;;;AAWA,gBAAaC,IAAb,EAAmBC,IAAnB,EAAyBC,IAAzB,EAA6C;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AAC3CV,IAAAA,MAAM,CAACE,MAAM,CAACS,MAAP,CAAcV,QAAd,EAAwBW,QAAxB,CAAiCL,IAAjC,CAAD,CAAN;AACA,SAAKA,IAAL,GAAYA,IAAZ;AAEA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,OAAL,GAAeA,OAAf;AAEA,SAAKG,MAAL,GAAc,IAAd;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACD;AAED;;;;;;;;;;;4BAOSL,I,EAAM;AACb,aAAO,KAAKA,IAAL,KAAcA,IAAd,IAAsB,KAAKC,OAAL,CAAaE,QAAb,CAAsBH,IAAI,CAACM,iBAAL,EAAtB,CAA7B;AACD;AAED;;;;;;;;+BAKY;AACV,WAAKF,MAAL,GAAc,IAAd;AACD;AAED;;;;;;;;;gCAMaG,I,EAAM;AACjB,WAAKF,QAAL,CAAcG,IAAd,CAAmBD,IAAnB;AACAA,MAAAA,IAAI,CAACH,MAAL,GAAc,IAAd;AACD;AAED;;;;;;;;;;;;6BASUK,I,EAAM;AACd,UAAIC,cAAc,GAAGD,IAAI,CAAC,IAAD,CAAzB;;AACA,UAAI,CAACC,cAAL,EAAqB;AACnB,eAAOA,cAAP;AACD;;AAED,WAAKL,QAAL,CAAcM,KAAd,CAAoB,UAAAC,KAAK,EAAI;AAC3BF,QAAAA,cAAc,GAAGE,KAAK,CAACC,QAAN,CAAeJ,IAAf,CAAjB;AACA,eAAOC,cAAP;AACD,OAHD;AAIA,aAAOA,cAAP;AACD;AAED;;;;;;;;+BAKY;AACV,aAAO,KAAKZ,IAAL,KAAcN,QAAQ,CAACG,MAA9B;AACD;AAED;;;;;;;;6BAKU;AACR,aAAO,KAAKG,IAAL,KAAcN,QAAQ,CAACI,IAA9B;AACD;;;;;AAGH;;;;;;;;;AAOA,SAASkB,KAAT,CAAgBC,IAAhB,EAAsB;AACpB,MAAMR,IAAI,GAAG,IAAIV,IAAJ,CACXkB,IAAI,CAACjB,IADM,EAEXiB,IAAI,CAAChB,IAFM,EAGXgB,IAAI,CAACf,IAHM,EAIXe,IAAI,CAACd,OAJM,CAAb;;AAMA,MAAIc,IAAI,CAACV,QAAL,IAAiBU,IAAI,CAACV,QAAL,YAAyBW,KAA9C,EAAqD;AACnDD,IAAAA,IAAI,CAACV,QAAL,CAAcY,OAAd,CAAsB,UAAAC,SAAS,EAAI;AACjCX,MAAAA,IAAI,CAACY,WAAL,CAAiBL,KAAK,CAACI,SAAD,CAAtB;AACD,KAFD;AAGD;;AACD,SAAOX,IAAP;AACD;;AAED,SACEO,KADF","sourcesContent":["import assert from 'assert'\n\nconst nodeType = Object.freeze({\n  FOLDER: 'folder',\n  FILE: 'file'\n})\n\n/**\n * A class that implements one node in a file-system tree. Each node may either\n * be a file or a folder and may have children if it is a folder.\n */\nclass Node {\n  /**\n   * Create a new object of class Node.\n   *\n   * @constructor\n   * @constructs {Node}\n   *\n   * @param {string} type - whether the node represents a file or a folder\n   * @param {string} icon - the icon associated with the Node\n   * @param {string} name - the name of the Node\n   * @param {Array} aliases - the list of alternative names of the Node\n   */\n  constructor (type, icon, name, aliases = []) {\n    assert(Object.values(nodeType).includes(type))\n    this.type = type\n\n    this.icon = icon\n    this.name = name\n    this.aliases = aliases\n\n    this.parent = null\n    this.children = []\n  }\n\n  /**\n   * Check if the given name is either the primary name of the current node or\n   * one of its aliases.\n   *\n   * @param {string} name - the name which is to be checked for a match\n   * @returns {boolean} whether the given name is one of the Node's valid names\n   */\n  hasName (name) {\n    return this.name === name || this.aliases.includes(name.toLocaleLowerCase())\n  }\n\n  /**\n   * Make the current node the root node of the tree. The property of a root\n   * node is to be its own parent, essentially allowing infinite upward\n   * traversal.\n   */\n  makeRoot () {\n    this.parent = this\n  }\n\n  /**\n   * Add the given node to the as a child of the current node. Also updates the\n   * reference to the parent node in the child object.\n   *\n   * @param {Node} node - the node to as a child of the current node\n   */\n  appendChild (node) {\n    this.children.push(node)\n    node.parent = this\n  }\n\n  /**\n   * Traverse the tree using the DFT algorithm. This may contribute to a loss\n   * in performance but it requires less code.\n   *\n   * The argument to the function is a function that accepts a node and returns\n   * a Boolean value, which if falsy, stops further traversal.\n   *\n   * @param {function} func - the function to execute on each node\n   */\n  traverse (func) {\n    let shouldContinue = func(this)\n    if (!shouldContinue) {\n      return shouldContinue\n    }\n\n    this.children.every(child => {\n      shouldContinue = child.traverse(func)\n      return shouldContinue\n    })\n    return shouldContinue\n  }\n\n  /**\n   * Determine whether this node represents a file system folder.\n   *\n   * @return {boolean} whether this node represents a file system folder\n   */\n  isFolder () {\n    return this.type === nodeType.FOLDER\n  }\n\n  /**\n   * Determine whether this node represents a file system file.\n   *\n   * @return {boolean} whether this node represents a file system file\n   */\n  isFile () {\n    return this.type === nodeType.FILE\n  }\n}\n\n/**\n * Parse the file system tree, given as a plain old JavaScript object into a\n * tree of Node objects with richer functionality.\n *\n * @param {Object} pojo - the file system tree parsed from JSON\n * @return {Node} the root node of the Node tree generated from the object\n */\nfunction parse (pojo) {\n  const node = new Node(\n    pojo.type,\n    pojo.icon,\n    pojo.name,\n    pojo.aliases\n  )\n  if (pojo.children && pojo.children instanceof Array) {\n    pojo.children.forEach(childPojo => {\n      node.appendChild(parse(childPojo))\n    })\n  }\n  return node\n}\n\nexport {\n  parse\n}\n"]}]}