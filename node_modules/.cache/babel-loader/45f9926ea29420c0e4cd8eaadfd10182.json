{"remainingRequest":"/Users/msfew/portfolio/node_modules/thread-loader/dist/cjs.js!/Users/msfew/portfolio/node_modules/babel-loader/lib/index.js!/Users/msfew/portfolio/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/msfew/portfolio/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/msfew/portfolio/src/templates/blog/subpages/post/Post.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/msfew/portfolio/src/templates/blog/subpages/post/Post.vue","mtime":1617939276000},{"path":"/Users/msfew/portfolio/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/msfew/portfolio/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/msfew/portfolio/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/msfew/portfolio/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/msfew/portfolio/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5yZXBsYWNlIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaCI7CmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gIi9Vc2Vycy9tc2Zldy9wb3J0Zm9saW8vbm9kZV9tb2R1bGVzL0B2dWUvYmFiZWwtcHJlc2V0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMiI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCBwcmlzbSBmcm9tICJwcmlzbWpzL2NvbXBvbmVudHMvcHJpc20tY29yZSI7CmltcG9ydCAicHJpc21qcy9jb21wb25lbnRzL3ByaXNtLWNsaWtlIjsKaW1wb3J0ICJwcmlzbWpzL2NvbXBvbmVudHMvcHJpc20tamF2YSI7CmltcG9ydCAicHJpc21qcy9jb21wb25lbnRzL3ByaXNtLWphdmFzY3JpcHQiOwppbXBvcnQgInByaXNtanMvY29tcG9uZW50cy9wcmlzbS1sYXRleCI7CmltcG9ydCAicHJpc21qcy9jb21wb25lbnRzL3ByaXNtLW1hcmt1cCI7CmltcG9ydCAicHJpc21qcy9jb21wb25lbnRzL3ByaXNtLW1hcmtkb3duIjsKaW1wb3J0ICJwcmlzbWpzL2NvbXBvbmVudHMvcHJpc20tcHl0aG9uIjsKaW1wb3J0ICJwcmlzbWpzL2NvbXBvbmVudHMvcHJpc20tcmVzdCI7CmltcG9ydCAicHJpc21qcy9jb21wb25lbnRzL3ByaXNtLWNzcyI7CmltcG9ydCAicHJpc21qcy9jb21wb25lbnRzL3ByaXNtLXNjc3MiOwppbXBvcnQgInByaXNtanMvY29tcG9uZW50cy9wcmlzbS15YW1sIjsKaW1wb3J0ICJwcmlzbWpzL2NvbXBvbmVudHMvcHJpc20tc3dpZnQiOwppbXBvcnQgInByaXNtanMvY29tcG9uZW50cy9wcmlzbS1jIjsKaW1wb3J0ICJwcmlzbWpzL3BsdWdpbnMvYXV0b2xpbmtlci9wcmlzbS1hdXRvbGlua2VyLmNzcyI7CmltcG9ydCAicHJpc21qcy9wbHVnaW5zL2F1dG9saW5rZXIvcHJpc20tYXV0b2xpbmtlciI7CmltcG9ydCAicHJpc21qcy90aGVtZXMvcHJpc20tc29sYXJpemVkbGlnaHQuY3NzIjsKaW1wb3J0IHsgbWFwQWN0aW9ucywgbWFwR2V0dGVycyB9IGZyb20gJ3Z1ZXgnOwppbXBvcnQgU3Bpbm5lciBmcm9tICdAL2NvbXBvbmVudHMvYmxvZy9zcGlubmVyL1NwaW5uZXInOwppbXBvcnQgTWV0YWRhdGEgZnJvbSAnQC9jb21wb25lbnRzL2Jsb2cvbWV0YWRhdGEvTWV0YWRhdGEnOwppbXBvcnQgZGVzY3JpcHRpb25zIGZyb20gJ0AvZGF0YS9kZXNjcmlwdGlvbnMuanNvbic7Ci8qKgogKiBUaGlzIGlzIG9uZSBibG9nIHBvc3QuIEl0IGNvbnRhaW5zIHRoZSBjb21wbGV0ZSBjb250ZW50IGZyb20gdGhlIHBvc3QuCiAqLwoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdQb3N0JywKICBtZXRhSW5mbzogZnVuY3Rpb24gbWV0YUluZm8oKSB7CiAgICB2YXIgcG9zdCA9IHRoaXMucG9zdDsKICAgIHJldHVybiB7CiAgICAgIHRpdGxlOiBwb3N0ID8gcG9zdC50aXRsZSA6ICdCbG9nIHBvc3QnLAogICAgICBtZXRhOiBbJ2Rlc2NyaXB0aW9uJywgJ29nOmRlc2NyaXB0aW9uJ10ubWFwKGZ1bmN0aW9uIChuYW1lKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIG5hbWU6IG5hbWUsCiAgICAgICAgICBjb250ZW50OiBkZXNjcmlwdGlvbnMuYmxvZwogICAgICAgIH07CiAgICAgIH0pCiAgICB9OwogIH0sCiAgY29tcG9uZW50czogewogICAgU3Bpbm5lcjogU3Bpbm5lciwKICAgIE1ldGFkYXRhOiBNZXRhZGF0YQogIH0sCiAgcHJvcHM6IHsKICAgIC8qKgogICAgICogX3RoZSBzbHVnIG9mIHRoZSBwb3N0IHRvIGRpc3BsYXlfCiAgICAgKi8KICAgIHNsdWc6IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICByZXF1aXJlZDogdHJ1ZQogICAgfQogIH0sCiAgY29tcHV0ZWQ6IF9vYmplY3RTcHJlYWQoewogICAgcG9zdDogZnVuY3Rpb24gcG9zdCgpIHsKICAgICAgcmV0dXJuIHRoaXMuY29udGVudFdpdGhTbHVnKHRoaXMuc2x1Zyk7CiAgICB9CiAgfSwgbWFwR2V0dGVycygnYmxvZycsIFsnY29udGVudFdpdGhTbHVnJ10pKSwKICB3YXRjaDogewogICAgLyoqCiAgICAgKiBSZWxvYWQgdGhlIHBhZ2UgYW5kIHRoZSBwb3N0IGNvbnRlbnQgd2hlbiB0aGUgc2x1ZyBjaGFuZ2VzLgogICAgICogQHBhcmFtIHtzdHJpbmd9IHRvIC0gdGhlIG5ldyB2YWx1ZSBvZiB0aGUgc2x1ZwogICAgICogQHBhcmFtIHtzdHJpbmd9IGZyb20gLSB0aGUgb2xkIHZhbHVlIG9mIHRoZSBzbHVnCiAgICAgKi8KICAgICckcm91dGUucGFyYW1zLnNsdWcnOiBmdW5jdGlvbiAkcm91dGVQYXJhbXNTbHVnKHRvLCBmcm9tKSB7CiAgICAgIGlmICh0byAhPT0gZnJvbSkgewogICAgICAgIC8vIE5vIG5lZWQgdG8gcmVsb2FkIGlmIG5vdGhpbmcgY2hhbmdlcwogICAgICAgIC8vIEZldGNoIG5ldyBjb250ZW50IGZyb20gdGhlIEFQSQogICAgICAgIHRoaXMubG9hZENvbnRlbnQoKTsKICAgICAgfQogICAgfQogIH0sCiAgbWV0aG9kczogX29iamVjdFNwcmVhZCh7CiAgICAvKioKICAgICAqIFNwbGl0IGFsbCBoZWFkaW5ncyBhdCB0aGUgaW5kaWNlcyBhbmQgY29sb3IgYWxsIGluZGljZXMgaW4gYSBzbGlnaHRseQogICAgICogbXV0ZWQgY29sb3IuCiAgICAgKi8KICAgIHNwbGl0SGVhZGluZ3M6IGZ1bmN0aW9uIHNwbGl0SGVhZGluZ3MoKSB7CiAgICAgIGlmICh0aGlzLiRyZWZzLmNvbnRlbnQpIHsKICAgICAgICB2YXIgaGVhZGluZ3MgPSB0aGlzLiRyZWZzLmNvbnRlbnQucXVlcnlTZWxlY3RvckFsbCgnaDIsIGgzLCBoNCwgaDUsIGg2Jyk7CiAgICAgICAgaGVhZGluZ3MuZm9yRWFjaChmdW5jdGlvbiAoaGVhZGluZykgewogICAgICAgICAgdmFyIHRleHQgPSBoZWFkaW5nLmlubmVyVGV4dDsKICAgICAgICAgIHZhciBodG1sID0gdGV4dC5yZXBsYWNlKC9eKFtcZC5dKykvLCAnPHNwYW4gY2xhc3M9ImluZGV4Ij7CpyQxPC9zcGFuPicpOwogICAgICAgICAgaGVhZGluZy5pbm5lckhUTUwgPSBodG1sOwogICAgICAgIH0pOwogICAgICB9CiAgICB9LAoKICAgIC8qKgogICAgICogSGlnaGxpZ2h0IGNvZGUgc25pcHBldHMgdXNpbmcgUHJpc20uCiAgICAgKi8KICAgIGhpZ2hsaWdodENvZGU6IGZ1bmN0aW9uIGhpZ2hsaWdodENvZGUoKSB7CiAgICAgIHByaXNtLmhpZ2hsaWdodEFsbCgpOwogICAgfSwKCiAgICAvKioKICAgICAqIFBlcmZvcm0gcHJvY2Vzc2luZyB0byBiZSBkb25lIGJlZm9yZSB0aGUgY29udGVudCBpcyBzaG93bi4KICAgICAqLwogICAgcGVyZm9ybVByZVByb2Nlc3Npbmc6IGZ1bmN0aW9uIHBlcmZvcm1QcmVQcm9jZXNzaW5nKCkgewogICAgICB0aGlzLnNwbGl0SGVhZGluZ3MoKTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBQZXJmb3JtIHByb2Nlc3NpbmcgdG8gYmUgZG9uZSBhZnRlciB0aGUgY29udGVudCBpcyBzaG93bi4KICAgICAqLwogICAgcGVyZm9ybVBvc3RQcm9jZXNzaW5nOiBmdW5jdGlvbiBwZXJmb3JtUG9zdFByb2Nlc3NpbmcoKSB7CiAgICAgIHRoaXMuaGlnaGxpZ2h0Q29kZSgpOwogICAgfSwKCiAgICAvKioKICAgICAqIEhpdCB0aGUgc2VydmVybGVzcyBBUEkgZm9yIHRoZSBwb3J0Zm9saW8gYW5kIGdldCB0aGUgSFRNTCBjb250ZW50IG9mCiAgICAgKiB0aGUgYmxvZy4gVGhpcyBIVE1MIGlzIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGJ5IFdyaXRlLmFzIGZyb20gdGhlCiAgICAgKiBNYXJrZG93biBjb250ZW50IG9mIHRoZSBwb3N0LgogICAgICovCiAgICBsb2FkQ29udGVudDogZnVuY3Rpb24gbG9hZENvbnRlbnQoKSB7CiAgICAgIGlmICghdGhpcy5jb250ZW50V2l0aFNsdWcodGhpcy5zbHVnKSkgewogICAgICAgIHRoaXMuZmV0Y2hDb250ZW50KHsKICAgICAgICAgIHNsdWc6IHRoaXMuc2x1ZwogICAgICAgIH0pOwogICAgICB9CiAgICB9CiAgfSwgbWFwQWN0aW9ucygnYmxvZycsIFsnZmV0Y2hDb250ZW50J10pKSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgdGhpcy5sb2FkQ29udGVudCgpOwogIH0KfTs="},{"version":3,"sources":["Post.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAyCA,K;;;;;;;;;;;;;;;;;AACA,SAAA,UAAA,EAAA,UAAA,QAAA,MAAA;AAEA,OAAA,OAAA,MAAA,mCAAA;AACA,OAAA,QAAA,MAAA,qCAAA;AAEA,OAAA,YAAA,MAAA,0BAAA;AAEA;;;;AAGA,eAAA;AACA,EAAA,IAAA,EAAA,MADA;AAEA,EAAA,QAFA,sBAEA;AACA,QAAA,IAAA,GAAA,KAAA,IAAA;AACA,WAAA;AACA,MAAA,KAAA,EAAA,IAAA,GAAA,IAAA,CAAA,KAAA,GAAA,WADA;AAEA,MAAA,IAAA,EAAA,CAAA,aAAA,EAAA,gBAAA,EAAA,GAAA,CAAA,UAAA,IAAA;AAAA,eAAA;AACA,UAAA,IAAA,EAAA,IADA;AAEA,UAAA,OAAA,EAAA,YAAA,CAAA;AAFA,SAAA;AAAA,OAAA;AAFA,KAAA;AAOA,GAXA;AAYA,EAAA,UAAA,EAAA;AACA,IAAA,OAAA,EAAA,OADA;AAEA,IAAA,QAAA,EAAA;AAFA,GAZA;AAgBA,EAAA,KAAA,EAAA;AACA;;;AAGA,IAAA,IAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA;AAJA,GAhBA;AAyBA,EAAA,QAAA;AACA,IAAA,IADA,kBACA;AACA,aAAA,KAAA,eAAA,CAAA,KAAA,IAAA,CAAA;AACA;AAHA,KAKA,UAAA,CAAA,MAAA,EAAA,CACA,iBADA,CAAA,CALA,CAzBA;AAkCA,EAAA,KAAA,EAAA;AACA;;;;;AAKA,0BAAA,0BAAA,EAAA,EAAA,IAAA,EAAA;AACA,UAAA,EAAA,KAAA,IAAA,EAAA;AAAA;AACA;AACA,aAAA,WAAA;AACA;AACA;AAXA,GAlCA;AA+CA,EAAA,OAAA;AACA;;;;AAIA,IAAA,aALA,2BAKA;AACA,UAAA,KAAA,KAAA,CAAA,OAAA,EAAA;AACA,YAAA,QAAA,GAAA,KAAA,KAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,oBAAA,CAAA;AACA,QAAA,QAAA,CAAA,OAAA,CAAA,UAAA,OAAA,EAAA;AACA,cAAA,IAAA,GAAA,OAAA,CAAA,SAAA;AACA,cAAA,IAAA,GAAA,IAAA,CAAA,OAAA,CACA,WADA,EAEA,gCAFA,CAAA;AAIA,UAAA,OAAA,CAAA,SAAA,GAAA,IAAA;AACA,SAPA;AAQA;AACA,KAjBA;;AAkBA;;;AAGA,IAAA,aArBA,2BAqBA;AACA,MAAA,KAAA,CAAA,YAAA;AACA,KAvBA;;AAyBA;;;AAGA,IAAA,oBA5BA,kCA4BA;AACA,WAAA,aAAA;AACA,KA9BA;;AA+BA;;;AAGA,IAAA,qBAlCA,mCAkCA;AACA,WAAA,aAAA;AACA,KApCA;;AAsCA;;;;;AAKA,IAAA,WA3CA,yBA2CA;AACA,UAAA,CAAA,KAAA,eAAA,CAAA,KAAA,IAAA,CAAA,EAAA;AACA,aAAA,YAAA,CAAA;AACA,UAAA,IAAA,EAAA,KAAA;AADA,SAAA;AAGA;AACA;AAjDA,KAmDA,UAAA,CAAA,MAAA,EAAA,CACA,cADA,CAAA,CAnDA,CA/CA;AAsGA,EAAA,OAtGA,qBAsGA;AACA,SAAA,WAAA;AACA;AAxGA,CAAA","sourcesContent":["<template>\n  <div id=\"blog--post\">\n    <transition\n      name=\"fade\"\n      mode=\"out-in\"\n      appear\n      @before-enter=\"performPreProcessing\"\n      @after-enter=\"performPostProcessing\">\n      <section\n        v-if=\"post\"\n        key=\"loaded\">\n        <div class=\"body\">\n          <div class=\"heading\">\n            <!-- Typography sizes in blog posts are off by one... -->\n            <h1 class=\"blue-colored\">{{ post.title }}</h1>\n            <!-- ...so this h1 looks like an h2 -->\n            <Metadata\n              :absolute-date=\"post.publicationDate.absolute\"\n              :relative-date=\"post.publicationDate.relative\"\n              :tags=\"post.tags\"/>\n          </div>\n\n          <div class=\"content\" v-html=\"post.body\" ref=\"content\"></div>\n\n          <p class=\"footer secondary-colored\">\n            Permalink to <a :href=\"post.portfolioUrl\">this post</a>.\n          </p>\n        </div>\n      </section>\n\n      <section\n        v-else\n        key=\"loading\"\n        class=\"centered\">\n        <Spinner/>\n      </section>\n    </transition>\n  </div>\n</template>\n\n<script>\n  import prism from 'prismjs'\n  import { mapActions, mapGetters } from 'vuex'\n\n  import Spinner from '@/components/blog/spinner/Spinner'\n  import Metadata from '@/components/blog/metadata/Metadata'\n\n  import descriptions from '@/data/descriptions.json'\n\n  /**\n   * This is one blog post. It contains the complete content from the post.\n   */\n  export default {\n    name: 'Post',\n    metaInfo () {\n      const post = this.post\n      return {\n        title: post ? post.title : 'Blog post',\n        meta: ['description', 'og:description'].map(name => ({\n          name,\n          content: descriptions.blog\n        }))\n      }\n    },\n    components: {\n      Spinner,\n      Metadata\n    },\n    props: {\n      /**\n       * _the slug of the post to display_\n       */\n      slug: {\n        type: String,\n        required: true\n      }\n    },\n    computed: {\n      post () {\n        return this.contentWithSlug(this.slug)\n      },\n\n      ...mapGetters('blog', [\n        'contentWithSlug'\n      ])\n    },\n    watch: {\n      /**\n       * Reload the page and the post content when the slug changes.\n       * @param {string} to - the new value of the slug\n       * @param {string} from - the old value of the slug\n       */\n      '$route.params.slug': function (to, from) {\n        if (to !== from) { // No need to reload if nothing changes\n          // Fetch new content from the API\n          this.loadContent()\n        }\n      }\n    },\n    methods: {\n      /**\n       * Split all headings at the indices and color all indices in a slightly\n       * muted color.\n       */\n      splitHeadings () {\n        if (this.$refs.content) {\n          const headings = this.$refs.content.querySelectorAll('h2, h3, h4, h5, h6')\n          headings.forEach(heading => {\n            const text = heading.innerText\n            const html = text.replace(\n              /^([\\d.]+)/,\n              '<span class=\"index\">§$1</span>'\n            )\n            heading.innerHTML = html\n          })\n        }\n      },\n      /**\n       * Highlight code snippets using Prism.\n       */\n      highlightCode () {\n        prism.highlightAll()\n      },\n\n      /**\n       * Perform processing to be done before the content is shown.\n       */\n      performPreProcessing () {\n        this.splitHeadings()\n      },\n      /**\n       * Perform processing to be done after the content is shown.\n       */\n      performPostProcessing () {\n        this.highlightCode()\n      },\n\n      /**\n       * Hit the serverless API for the portfolio and get the HTML content of\n       * the blog. This HTML is automatically generated by Write.as from the\n       * Markdown content of the post.\n       */\n      loadContent () {\n        if (!this.contentWithSlug(this.slug)) {\n          this.fetchContent({\n            slug: this.slug\n          })\n        }\n      },\n\n      ...mapActions('blog', [\n        'fetchContent'\n      ])\n    },\n    mounted () {\n      this.loadContent()\n    }\n  }\n</script>\n\n<style scoped lang=\"scss\" src=\"./Post.scss\"/>\n"],"sourceRoot":"src/templates/blog/subpages/post"}]}