{"remainingRequest":"/Users/msfew/Downloads/portfolio/node_modules/babel-loader/lib/index.js!/Users/msfew/Downloads/portfolio/node_modules/eslint-loader/index.js??ref--13-0!/Users/msfew/Downloads/portfolio/src/store/support/tree.js","dependencies":[{"path":"/Users/msfew/Downloads/portfolio/src/store/support/tree.js","mtime":1617939276000},{"path":"/Users/msfew/Downloads/portfolio/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/msfew/Downloads/portfolio/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/msfew/Downloads/portfolio/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZXZlcnkiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mb3ItZWFjaCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluY2x1ZGVzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5mcmVlemUiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudmFsdWVzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmluY2x1ZGVzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaCI7CmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAiL1VzZXJzL21zZmV3L0Rvd25sb2Fkcy9wb3J0Zm9saW8vbm9kZV9tb2R1bGVzL0B2dWUvYmFiZWwtcHJlc2V0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2siOwppbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gIi9Vc2Vycy9tc2Zldy9Eb3dubG9hZHMvcG9ydGZvbGlvL25vZGVfbW9kdWxlcy9AdnVlL2JhYmVsLXByZXNldC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzIjsKaW1wb3J0IGFzc2VydCBmcm9tICdhc3NlcnQnOwp2YXIgbm9kZVR5cGUgPSBPYmplY3QuZnJlZXplKHsKICBGT0xERVI6ICdmb2xkZXInLAogIEZJTEU6ICdmaWxlJwp9KTsKLyoqCiAqIEEgY2xhc3MgdGhhdCBpbXBsZW1lbnRzIG9uZSBub2RlIGluIGEgZmlsZS1zeXN0ZW0gdHJlZS4gRWFjaCBub2RlIG1heSBlaXRoZXIKICogYmUgYSBmaWxlIG9yIGEgZm9sZGVyIGFuZCBtYXkgaGF2ZSBjaGlsZHJlbiBpZiBpdCBpcyBhIGZvbGRlci4KICovCgp2YXIgTm9kZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgLyoqCiAgICogQ3JlYXRlIGEgbmV3IG9iamVjdCBvZiBjbGFzcyBOb2RlLgogICAqCiAgICogQGNvbnN0cnVjdG9yCiAgICogQGNvbnN0cnVjdHMge05vZGV9CiAgICoKICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIHdoZXRoZXIgdGhlIG5vZGUgcmVwcmVzZW50cyBhIGZpbGUgb3IgYSBmb2xkZXIKICAgKiBAcGFyYW0ge3N0cmluZ30gaWNvbiAtIHRoZSBpY29uIGFzc29jaWF0ZWQgd2l0aCB0aGUgTm9kZQogICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gdGhlIG5hbWUgb2YgdGhlIE5vZGUKICAgKiBAcGFyYW0ge0FycmF5fSBhbGlhc2VzIC0gdGhlIGxpc3Qgb2YgYWx0ZXJuYXRpdmUgbmFtZXMgb2YgdGhlIE5vZGUKICAgKi8KICBmdW5jdGlvbiBOb2RlKHR5cGUsIGljb24sIG5hbWUpIHsKICAgIHZhciBhbGlhc2VzID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBbXTsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTm9kZSk7CgogICAgYXNzZXJ0KE9iamVjdC52YWx1ZXMobm9kZVR5cGUpLmluY2x1ZGVzKHR5cGUpKTsKICAgIHRoaXMudHlwZSA9IHR5cGU7CiAgICB0aGlzLmljb24gPSBpY29uOwogICAgdGhpcy5uYW1lID0gbmFtZTsKICAgIHRoaXMuYWxpYXNlcyA9IGFsaWFzZXM7CiAgICB0aGlzLnBhcmVudCA9IG51bGw7CiAgICB0aGlzLmNoaWxkcmVuID0gW107CiAgfQogIC8qKgogICAqIENoZWNrIGlmIHRoZSBnaXZlbiBuYW1lIGlzIGVpdGhlciB0aGUgcHJpbWFyeSBuYW1lIG9mIHRoZSBjdXJyZW50IG5vZGUgb3IKICAgKiBvbmUgb2YgaXRzIGFsaWFzZXMuCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIHRoZSBuYW1lIHdoaWNoIGlzIHRvIGJlIGNoZWNrZWQgZm9yIGEgbWF0Y2gKICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gd2hldGhlciB0aGUgZ2l2ZW4gbmFtZSBpcyBvbmUgb2YgdGhlIE5vZGUncyB2YWxpZCBuYW1lcwogICAqLwoKCiAgX2NyZWF0ZUNsYXNzKE5vZGUsIFt7CiAgICBrZXk6ICJoYXNOYW1lIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBoYXNOYW1lKG5hbWUpIHsKICAgICAgcmV0dXJuIHRoaXMubmFtZSA9PT0gbmFtZSB8fCB0aGlzLmFsaWFzZXMuaW5jbHVkZXMobmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpKTsKICAgIH0KICAgIC8qKgogICAgICogTWFrZSB0aGUgY3VycmVudCBub2RlIHRoZSByb290IG5vZGUgb2YgdGhlIHRyZWUuIFRoZSBwcm9wZXJ0eSBvZiBhIHJvb3QKICAgICAqIG5vZGUgaXMgdG8gYmUgaXRzIG93biBwYXJlbnQsIGVzc2VudGlhbGx5IGFsbG93aW5nIGluZmluaXRlIHVwd2FyZAogICAgICogdHJhdmVyc2FsLgogICAgICovCgogIH0sIHsKICAgIGtleTogIm1ha2VSb290IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBtYWtlUm9vdCgpIHsKICAgICAgdGhpcy5wYXJlbnQgPSB0aGlzOwogICAgfQogICAgLyoqCiAgICAgKiBBZGQgdGhlIGdpdmVuIG5vZGUgdG8gdGhlIGFzIGEgY2hpbGQgb2YgdGhlIGN1cnJlbnQgbm9kZS4gQWxzbyB1cGRhdGVzIHRoZQogICAgICogcmVmZXJlbmNlIHRvIHRoZSBwYXJlbnQgbm9kZSBpbiB0aGUgY2hpbGQgb2JqZWN0LgogICAgICoKICAgICAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAtIHRoZSBub2RlIHRvIGFzIGEgY2hpbGQgb2YgdGhlIGN1cnJlbnQgbm9kZQogICAgICovCgogIH0sIHsKICAgIGtleTogImFwcGVuZENoaWxkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBlbmRDaGlsZChub2RlKSB7CiAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChub2RlKTsKICAgICAgbm9kZS5wYXJlbnQgPSB0aGlzOwogICAgfQogICAgLyoqCiAgICAgKiBUcmF2ZXJzZSB0aGUgdHJlZSB1c2luZyB0aGUgREZUIGFsZ29yaXRobS4gVGhpcyBtYXkgY29udHJpYnV0ZSB0byBhIGxvc3MKICAgICAqIGluIHBlcmZvcm1hbmNlIGJ1dCBpdCByZXF1aXJlcyBsZXNzIGNvZGUuCiAgICAgKgogICAgICogVGhlIGFyZ3VtZW50IHRvIHRoZSBmdW5jdGlvbiBpcyBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBhIG5vZGUgYW5kIHJldHVybnMKICAgICAqIGEgQm9vbGVhbiB2YWx1ZSwgd2hpY2ggaWYgZmFsc3ksIHN0b3BzIGZ1cnRoZXIgdHJhdmVyc2FsLgogICAgICoKICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZ1bmMgLSB0aGUgZnVuY3Rpb24gdG8gZXhlY3V0ZSBvbiBlYWNoIG5vZGUKICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJ0cmF2ZXJzZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdHJhdmVyc2UoZnVuYykgewogICAgICB2YXIgc2hvdWxkQ29udGludWUgPSBmdW5jKHRoaXMpOwoKICAgICAgaWYgKCFzaG91bGRDb250aW51ZSkgewogICAgICAgIHJldHVybiBzaG91bGRDb250aW51ZTsKICAgICAgfQoKICAgICAgdGhpcy5jaGlsZHJlbi5ldmVyeShmdW5jdGlvbiAoY2hpbGQpIHsKICAgICAgICBzaG91bGRDb250aW51ZSA9IGNoaWxkLnRyYXZlcnNlKGZ1bmMpOwogICAgICAgIHJldHVybiBzaG91bGRDb250aW51ZTsKICAgICAgfSk7CiAgICAgIHJldHVybiBzaG91bGRDb250aW51ZTsKICAgIH0KICAgIC8qKgogICAgICogRGV0ZXJtaW5lIHdoZXRoZXIgdGhpcyBub2RlIHJlcHJlc2VudHMgYSBmaWxlIHN5c3RlbSBmb2xkZXIuCiAgICAgKgogICAgICogQHJldHVybiB7Ym9vbGVhbn0gd2hldGhlciB0aGlzIG5vZGUgcmVwcmVzZW50cyBhIGZpbGUgc3lzdGVtIGZvbGRlcgogICAgICovCgogIH0sIHsKICAgIGtleTogImlzRm9sZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBpc0ZvbGRlcigpIHsKICAgICAgcmV0dXJuIHRoaXMudHlwZSA9PT0gbm9kZVR5cGUuRk9MREVSOwogICAgfQogICAgLyoqCiAgICAgKiBEZXRlcm1pbmUgd2hldGhlciB0aGlzIG5vZGUgcmVwcmVzZW50cyBhIGZpbGUgc3lzdGVtIGZpbGUuCiAgICAgKgogICAgICogQHJldHVybiB7Ym9vbGVhbn0gd2hldGhlciB0aGlzIG5vZGUgcmVwcmVzZW50cyBhIGZpbGUgc3lzdGVtIGZpbGUKICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJpc0ZpbGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGlzRmlsZSgpIHsKICAgICAgcmV0dXJuIHRoaXMudHlwZSA9PT0gbm9kZVR5cGUuRklMRTsKICAgIH0KICB9XSk7CgogIHJldHVybiBOb2RlOwp9KCk7Ci8qKgogKiBQYXJzZSB0aGUgZmlsZSBzeXN0ZW0gdHJlZSwgZ2l2ZW4gYXMgYSBwbGFpbiBvbGQgSmF2YVNjcmlwdCBvYmplY3QgaW50byBhCiAqIHRyZWUgb2YgTm9kZSBvYmplY3RzIHdpdGggcmljaGVyIGZ1bmN0aW9uYWxpdHkuCiAqCiAqIEBwYXJhbSB7T2JqZWN0fSBwb2pvIC0gdGhlIGZpbGUgc3lzdGVtIHRyZWUgcGFyc2VkIGZyb20gSlNPTgogKiBAcmV0dXJuIHtOb2RlfSB0aGUgcm9vdCBub2RlIG9mIHRoZSBOb2RlIHRyZWUgZ2VuZXJhdGVkIGZyb20gdGhlIG9iamVjdAogKi8KCgpmdW5jdGlvbiBwYXJzZShwb2pvKSB7CiAgdmFyIG5vZGUgPSBuZXcgTm9kZShwb2pvLnR5cGUsIHBvam8uaWNvbiwgcG9qby5uYW1lLCBwb2pvLmFsaWFzZXMpOwoKICBpZiAocG9qby5jaGlsZHJlbiAmJiBwb2pvLmNoaWxkcmVuIGluc3RhbmNlb2YgQXJyYXkpIHsKICAgIHBvam8uY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGRQb2pvKSB7CiAgICAgIG5vZGUuYXBwZW5kQ2hpbGQocGFyc2UoY2hpbGRQb2pvKSk7CiAgICB9KTsKICB9CgogIHJldHVybiBub2RlOwp9CgpleHBvcnQgeyBwYXJzZSB9Ow=="},{"version":3,"sources":["/Users/msfew/Downloads/portfolio/src/store/support/tree.js"],"names":["assert","nodeType","Object","freeze","FOLDER","FILE","Node","type","icon","name","aliases","values","includes","parent","children","toLocaleLowerCase","node","push","func","shouldContinue","every","child","traverse","parse","pojo","Array","forEach","childPojo","appendChild"],"mappings":";;;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,QAAnB;AAEA,IAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAc;AAC7BC,EAAAA,MAAM,EAAE,QADqB;AAE7BC,EAAAA,IAAI,EAAE;AAFuB,CAAd,CAAjB;AAKA;;;;;IAIMC,I;AACJ;;;;;;;;;;;AAWA,gBAAaC,IAAb,EAAmBC,IAAnB,EAAyBC,IAAzB,EAA6C;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AAC3CV,IAAAA,MAAM,CAACE,MAAM,CAACS,MAAP,CAAcV,QAAd,EAAwBW,QAAxB,CAAiCL,IAAjC,CAAD,CAAN;AACA,SAAKA,IAAL,GAAYA,IAAZ;AAEA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,OAAL,GAAeA,OAAf;AAEA,SAAKG,MAAL,GAAc,IAAd;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACD;AAED;;;;;;;;;;;4BAOSL,I,EAAM;AACb,aAAO,KAAKA,IAAL,KAAcA,IAAd,IAAsB,KAAKC,OAAL,CAAaE,QAAb,CAAsBH,IAAI,CAACM,iBAAL,EAAtB,CAA7B;AACD;AAED;;;;;;;;+BAKY;AACV,WAAKF,MAAL,GAAc,IAAd;AACD;AAED;;;;;;;;;gCAMaG,I,EAAM;AACjB,WAAKF,QAAL,CAAcG,IAAd,CAAmBD,IAAnB;AACAA,MAAAA,IAAI,CAACH,MAAL,GAAc,IAAd;AACD;AAED;;;;;;;;;;;;6BASUK,I,EAAM;AACd,UAAIC,cAAc,GAAGD,IAAI,CAAC,IAAD,CAAzB;;AACA,UAAI,CAACC,cAAL,EAAqB;AACnB,eAAOA,cAAP;AACD;;AAED,WAAKL,QAAL,CAAcM,KAAd,CAAoB,UAAAC,KAAK,EAAI;AAC3BF,QAAAA,cAAc,GAAGE,KAAK,CAACC,QAAN,CAAeJ,IAAf,CAAjB;AACA,eAAOC,cAAP;AACD,OAHD;AAIA,aAAOA,cAAP;AACD;AAED;;;;;;;;+BAKY;AACV,aAAO,KAAKZ,IAAL,KAAcN,QAAQ,CAACG,MAA9B;AACD;AAED;;;;;;;;6BAKU;AACR,aAAO,KAAKG,IAAL,KAAcN,QAAQ,CAACI,IAA9B;AACD;;;;;AAGH;;;;;;;;;AAOA,SAASkB,KAAT,CAAgBC,IAAhB,EAAsB;AACpB,MAAMR,IAAI,GAAG,IAAIV,IAAJ,CACXkB,IAAI,CAACjB,IADM,EAEXiB,IAAI,CAAChB,IAFM,EAGXgB,IAAI,CAACf,IAHM,EAIXe,IAAI,CAACd,OAJM,CAAb;;AAMA,MAAIc,IAAI,CAACV,QAAL,IAAiBU,IAAI,CAACV,QAAL,YAAyBW,KAA9C,EAAqD;AACnDD,IAAAA,IAAI,CAACV,QAAL,CAAcY,OAAd,CAAsB,UAAAC,SAAS,EAAI;AACjCX,MAAAA,IAAI,CAACY,WAAL,CAAiBL,KAAK,CAACI,SAAD,CAAtB;AACD,KAFD;AAGD;;AACD,SAAOX,IAAP;AACD;;AAED,SACEO,KADF","sourcesContent":["import assert from 'assert'\n\nconst nodeType = Object.freeze({\n  FOLDER: 'folder',\n  FILE: 'file'\n})\n\n/**\n * A class that implements one node in a file-system tree. Each node may either\n * be a file or a folder and may have children if it is a folder.\n */\nclass Node {\n  /**\n   * Create a new object of class Node.\n   *\n   * @constructor\n   * @constructs {Node}\n   *\n   * @param {string} type - whether the node represents a file or a folder\n   * @param {string} icon - the icon associated with the Node\n   * @param {string} name - the name of the Node\n   * @param {Array} aliases - the list of alternative names of the Node\n   */\n  constructor (type, icon, name, aliases = []) {\n    assert(Object.values(nodeType).includes(type))\n    this.type = type\n\n    this.icon = icon\n    this.name = name\n    this.aliases = aliases\n\n    this.parent = null\n    this.children = []\n  }\n\n  /**\n   * Check if the given name is either the primary name of the current node or\n   * one of its aliases.\n   *\n   * @param {string} name - the name which is to be checked for a match\n   * @returns {boolean} whether the given name is one of the Node's valid names\n   */\n  hasName (name) {\n    return this.name === name || this.aliases.includes(name.toLocaleLowerCase())\n  }\n\n  /**\n   * Make the current node the root node of the tree. The property of a root\n   * node is to be its own parent, essentially allowing infinite upward\n   * traversal.\n   */\n  makeRoot () {\n    this.parent = this\n  }\n\n  /**\n   * Add the given node to the as a child of the current node. Also updates the\n   * reference to the parent node in the child object.\n   *\n   * @param {Node} node - the node to as a child of the current node\n   */\n  appendChild (node) {\n    this.children.push(node)\n    node.parent = this\n  }\n\n  /**\n   * Traverse the tree using the DFT algorithm. This may contribute to a loss\n   * in performance but it requires less code.\n   *\n   * The argument to the function is a function that accepts a node and returns\n   * a Boolean value, which if falsy, stops further traversal.\n   *\n   * @param {function} func - the function to execute on each node\n   */\n  traverse (func) {\n    let shouldContinue = func(this)\n    if (!shouldContinue) {\n      return shouldContinue\n    }\n\n    this.children.every(child => {\n      shouldContinue = child.traverse(func)\n      return shouldContinue\n    })\n    return shouldContinue\n  }\n\n  /**\n   * Determine whether this node represents a file system folder.\n   *\n   * @return {boolean} whether this node represents a file system folder\n   */\n  isFolder () {\n    return this.type === nodeType.FOLDER\n  }\n\n  /**\n   * Determine whether this node represents a file system file.\n   *\n   * @return {boolean} whether this node represents a file system file\n   */\n  isFile () {\n    return this.type === nodeType.FILE\n  }\n}\n\n/**\n * Parse the file system tree, given as a plain old JavaScript object into a\n * tree of Node objects with richer functionality.\n *\n * @param {Object} pojo - the file system tree parsed from JSON\n * @return {Node} the root node of the Node tree generated from the object\n */\nfunction parse (pojo) {\n  const node = new Node(\n    pojo.type,\n    pojo.icon,\n    pojo.name,\n    pojo.aliases\n  )\n  if (pojo.children && pojo.children instanceof Array) {\n    pojo.children.forEach(childPojo => {\n      node.appendChild(parse(childPojo))\n    })\n  }\n  return node\n}\n\nexport {\n  parse\n}\n"]}]}