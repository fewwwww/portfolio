{"remainingRequest":"/Users/msfew/Downloads/portfolio/node_modules/babel-loader/lib/index.js!/Users/msfew/Downloads/portfolio/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/msfew/Downloads/portfolio/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/msfew/Downloads/portfolio/src/templates/blog/subpages/post/Post.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/msfew/Downloads/portfolio/src/templates/blog/subpages/post/Post.vue","mtime":1617939276000},{"path":"/Users/msfew/Downloads/portfolio/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/msfew/Downloads/portfolio/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/msfew/Downloads/portfolio/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/msfew/Downloads/portfolio/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5yZXBsYWNlIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaCI7CmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gIi9Vc2Vycy9tc2Zldy9Eb3dubG9hZHMvcG9ydGZvbGlvL25vZGVfbW9kdWxlcy9AdnVlL2JhYmVsLXByZXNldC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDIiOwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwppbXBvcnQgcHJpc20gZnJvbSAicHJpc21qcy9jb21wb25lbnRzL3ByaXNtLWNvcmUiOwppbXBvcnQgInByaXNtanMvY29tcG9uZW50cy9wcmlzbS1jbGlrZSI7CmltcG9ydCAicHJpc21qcy9jb21wb25lbnRzL3ByaXNtLWphdmEiOwppbXBvcnQgInByaXNtanMvY29tcG9uZW50cy9wcmlzbS1qYXZhc2NyaXB0IjsKaW1wb3J0ICJwcmlzbWpzL2NvbXBvbmVudHMvcHJpc20tbGF0ZXgiOwppbXBvcnQgInByaXNtanMvY29tcG9uZW50cy9wcmlzbS1tYXJrdXAiOwppbXBvcnQgInByaXNtanMvY29tcG9uZW50cy9wcmlzbS1tYXJrZG93biI7CmltcG9ydCAicHJpc21qcy9jb21wb25lbnRzL3ByaXNtLXB5dGhvbiI7CmltcG9ydCAicHJpc21qcy9jb21wb25lbnRzL3ByaXNtLXJlc3QiOwppbXBvcnQgInByaXNtanMvY29tcG9uZW50cy9wcmlzbS1jc3MiOwppbXBvcnQgInByaXNtanMvY29tcG9uZW50cy9wcmlzbS1zY3NzIjsKaW1wb3J0ICJwcmlzbWpzL2NvbXBvbmVudHMvcHJpc20teWFtbCI7CmltcG9ydCAicHJpc21qcy9jb21wb25lbnRzL3ByaXNtLXN3aWZ0IjsKaW1wb3J0ICJwcmlzbWpzL2NvbXBvbmVudHMvcHJpc20tYyI7CmltcG9ydCAicHJpc21qcy9wbHVnaW5zL2F1dG9saW5rZXIvcHJpc20tYXV0b2xpbmtlci5jc3MiOwppbXBvcnQgInByaXNtanMvcGx1Z2lucy9hdXRvbGlua2VyL3ByaXNtLWF1dG9saW5rZXIiOwppbXBvcnQgInByaXNtanMvdGhlbWVzL3ByaXNtLXNvbGFyaXplZGxpZ2h0LmNzcyI7CmltcG9ydCB7IG1hcEFjdGlvbnMsIG1hcEdldHRlcnMgfSBmcm9tICd2dWV4JzsKaW1wb3J0IFNwaW5uZXIgZnJvbSAnQC9jb21wb25lbnRzL2Jsb2cvc3Bpbm5lci9TcGlubmVyJzsKaW1wb3J0IE1ldGFkYXRhIGZyb20gJ0AvY29tcG9uZW50cy9ibG9nL21ldGFkYXRhL01ldGFkYXRhJzsKaW1wb3J0IGRlc2NyaXB0aW9ucyBmcm9tICdAL2RhdGEvZGVzY3JpcHRpb25zLmpzb24nOwovKioKICogVGhpcyBpcyBvbmUgYmxvZyBwb3N0LiBJdCBjb250YWlucyB0aGUgY29tcGxldGUgY29udGVudCBmcm9tIHRoZSBwb3N0LgogKi8KCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnUG9zdCcsCiAgbWV0YUluZm86IGZ1bmN0aW9uIG1ldGFJbmZvKCkgewogICAgdmFyIHBvc3QgPSB0aGlzLnBvc3Q7CiAgICByZXR1cm4gewogICAgICB0aXRsZTogcG9zdCA/IHBvc3QudGl0bGUgOiAnQmxvZyBwb3N0JywKICAgICAgbWV0YTogWydkZXNjcmlwdGlvbicsICdvZzpkZXNjcmlwdGlvbiddLm1hcChmdW5jdGlvbiAobmFtZSkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICBuYW1lOiBuYW1lLAogICAgICAgICAgY29udGVudDogZGVzY3JpcHRpb25zLmJsb2cKICAgICAgICB9OwogICAgICB9KQogICAgfTsKICB9LAogIGNvbXBvbmVudHM6IHsKICAgIFNwaW5uZXI6IFNwaW5uZXIsCiAgICBNZXRhZGF0YTogTWV0YWRhdGEKICB9LAogIHByb3BzOiB7CiAgICAvKioKICAgICAqIF90aGUgc2x1ZyBvZiB0aGUgcG9zdCB0byBkaXNwbGF5XwogICAgICovCiAgICBzbHVnOiB7CiAgICAgIHR5cGU6IFN0cmluZywKICAgICAgcmVxdWlyZWQ6IHRydWUKICAgIH0KICB9LAogIGNvbXB1dGVkOiBfb2JqZWN0U3ByZWFkKHsKICAgIHBvc3Q6IGZ1bmN0aW9uIHBvc3QoKSB7CiAgICAgIHJldHVybiB0aGlzLmNvbnRlbnRXaXRoU2x1Zyh0aGlzLnNsdWcpOwogICAgfQogIH0sIG1hcEdldHRlcnMoJ2Jsb2cnLCBbJ2NvbnRlbnRXaXRoU2x1ZyddKSksCiAgd2F0Y2g6IHsKICAgIC8qKgogICAgICogUmVsb2FkIHRoZSBwYWdlIGFuZCB0aGUgcG9zdCBjb250ZW50IHdoZW4gdGhlIHNsdWcgY2hhbmdlcy4KICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0byAtIHRoZSBuZXcgdmFsdWUgb2YgdGhlIHNsdWcKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmcm9tIC0gdGhlIG9sZCB2YWx1ZSBvZiB0aGUgc2x1ZwogICAgICovCiAgICAnJHJvdXRlLnBhcmFtcy5zbHVnJzogZnVuY3Rpb24gJHJvdXRlUGFyYW1zU2x1Zyh0bywgZnJvbSkgewogICAgICBpZiAodG8gIT09IGZyb20pIHsKICAgICAgICAvLyBObyBuZWVkIHRvIHJlbG9hZCBpZiBub3RoaW5nIGNoYW5nZXMKICAgICAgICAvLyBGZXRjaCBuZXcgY29udGVudCBmcm9tIHRoZSBBUEkKICAgICAgICB0aGlzLmxvYWRDb250ZW50KCk7CiAgICAgIH0KICAgIH0KICB9LAogIG1ldGhvZHM6IF9vYmplY3RTcHJlYWQoewogICAgLyoqCiAgICAgKiBTcGxpdCBhbGwgaGVhZGluZ3MgYXQgdGhlIGluZGljZXMgYW5kIGNvbG9yIGFsbCBpbmRpY2VzIGluIGEgc2xpZ2h0bHkKICAgICAqIG11dGVkIGNvbG9yLgogICAgICovCiAgICBzcGxpdEhlYWRpbmdzOiBmdW5jdGlvbiBzcGxpdEhlYWRpbmdzKCkgewogICAgICBpZiAodGhpcy4kcmVmcy5jb250ZW50KSB7CiAgICAgICAgdmFyIGhlYWRpbmdzID0gdGhpcy4kcmVmcy5jb250ZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2gyLCBoMywgaDQsIGg1LCBoNicpOwogICAgICAgIGhlYWRpbmdzLmZvckVhY2goZnVuY3Rpb24gKGhlYWRpbmcpIHsKICAgICAgICAgIHZhciB0ZXh0ID0gaGVhZGluZy5pbm5lclRleHQ7CiAgICAgICAgICB2YXIgaHRtbCA9IHRleHQucmVwbGFjZSgvXihbXGQuXSspLywgJzxzcGFuIGNsYXNzPSJpbmRleCI+wqckMTwvc3Bhbj4nKTsKICAgICAgICAgIGhlYWRpbmcuaW5uZXJIVE1MID0gaHRtbDsKICAgICAgICB9KTsKICAgICAgfQogICAgfSwKCiAgICAvKioKICAgICAqIEhpZ2hsaWdodCBjb2RlIHNuaXBwZXRzIHVzaW5nIFByaXNtLgogICAgICovCiAgICBoaWdobGlnaHRDb2RlOiBmdW5jdGlvbiBoaWdobGlnaHRDb2RlKCkgewogICAgICBwcmlzbS5oaWdobGlnaHRBbGwoKTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBQZXJmb3JtIHByb2Nlc3NpbmcgdG8gYmUgZG9uZSBiZWZvcmUgdGhlIGNvbnRlbnQgaXMgc2hvd24uCiAgICAgKi8KICAgIHBlcmZvcm1QcmVQcm9jZXNzaW5nOiBmdW5jdGlvbiBwZXJmb3JtUHJlUHJvY2Vzc2luZygpIHsKICAgICAgdGhpcy5zcGxpdEhlYWRpbmdzKCk7CiAgICB9LAoKICAgIC8qKgogICAgICogUGVyZm9ybSBwcm9jZXNzaW5nIHRvIGJlIGRvbmUgYWZ0ZXIgdGhlIGNvbnRlbnQgaXMgc2hvd24uCiAgICAgKi8KICAgIHBlcmZvcm1Qb3N0UHJvY2Vzc2luZzogZnVuY3Rpb24gcGVyZm9ybVBvc3RQcm9jZXNzaW5nKCkgewogICAgICB0aGlzLmhpZ2hsaWdodENvZGUoKTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBIaXQgdGhlIHNlcnZlcmxlc3MgQVBJIGZvciB0aGUgcG9ydGZvbGlvIGFuZCBnZXQgdGhlIEhUTUwgY29udGVudCBvZgogICAgICogdGhlIGJsb2cuIFRoaXMgSFRNTCBpcyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBieSBXcml0ZS5hcyBmcm9tIHRoZQogICAgICogTWFya2Rvd24gY29udGVudCBvZiB0aGUgcG9zdC4KICAgICAqLwogICAgbG9hZENvbnRlbnQ6IGZ1bmN0aW9uIGxvYWRDb250ZW50KCkgewogICAgICBpZiAoIXRoaXMuY29udGVudFdpdGhTbHVnKHRoaXMuc2x1ZykpIHsKICAgICAgICB0aGlzLmZldGNoQ29udGVudCh7CiAgICAgICAgICBzbHVnOiB0aGlzLnNsdWcKICAgICAgICB9KTsKICAgICAgfQogICAgfQogIH0sIG1hcEFjdGlvbnMoJ2Jsb2cnLCBbJ2ZldGNoQ29udGVudCddKSksCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgIHRoaXMubG9hZENvbnRlbnQoKTsKICB9Cn07"},{"version":3,"sources":["Post.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAyCA,K;;;;;;;;;;;;;;;;;AACA,SAAA,UAAA,EAAA,UAAA,QAAA,MAAA;AAEA,OAAA,OAAA,MAAA,mCAAA;AACA,OAAA,QAAA,MAAA,qCAAA;AAEA,OAAA,YAAA,MAAA,0BAAA;AAEA;;;;AAGA,eAAA;AACA,EAAA,IAAA,EAAA,MADA;AAEA,EAAA,QAFA,sBAEA;AACA,QAAA,IAAA,GAAA,KAAA,IAAA;AACA,WAAA;AACA,MAAA,KAAA,EAAA,IAAA,GAAA,IAAA,CAAA,KAAA,GAAA,WADA;AAEA,MAAA,IAAA,EAAA,CAAA,aAAA,EAAA,gBAAA,EAAA,GAAA,CAAA,UAAA,IAAA;AAAA,eAAA;AACA,UAAA,IAAA,EAAA,IADA;AAEA,UAAA,OAAA,EAAA,YAAA,CAAA;AAFA,SAAA;AAAA,OAAA;AAFA,KAAA;AAOA,GAXA;AAYA,EAAA,UAAA,EAAA;AACA,IAAA,OAAA,EAAA,OADA;AAEA,IAAA,QAAA,EAAA;AAFA,GAZA;AAgBA,EAAA,KAAA,EAAA;AACA;;;AAGA,IAAA,IAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA;AAJA,GAhBA;AAyBA,EAAA,QAAA;AACA,IAAA,IADA,kBACA;AACA,aAAA,KAAA,eAAA,CAAA,KAAA,IAAA,CAAA;AACA;AAHA,KAKA,UAAA,CAAA,MAAA,EAAA,CACA,iBADA,CAAA,CALA,CAzBA;AAkCA,EAAA,KAAA,EAAA;AACA;;;;;AAKA,0BAAA,0BAAA,EAAA,EAAA,IAAA,EAAA;AACA,UAAA,EAAA,KAAA,IAAA,EAAA;AAAA;AACA;AACA,aAAA,WAAA;AACA;AACA;AAXA,GAlCA;AA+CA,EAAA,OAAA;AACA;;;;AAIA,IAAA,aALA,2BAKA;AACA,UAAA,KAAA,KAAA,CAAA,OAAA,EAAA;AACA,YAAA,QAAA,GAAA,KAAA,KAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,oBAAA,CAAA;AACA,QAAA,QAAA,CAAA,OAAA,CAAA,UAAA,OAAA,EAAA;AACA,cAAA,IAAA,GAAA,OAAA,CAAA,SAAA;AACA,cAAA,IAAA,GAAA,IAAA,CAAA,OAAA,CACA,WADA,EAEA,gCAFA,CAAA;AAIA,UAAA,OAAA,CAAA,SAAA,GAAA,IAAA;AACA,SAPA;AAQA;AACA,KAjBA;;AAkBA;;;AAGA,IAAA,aArBA,2BAqBA;AACA,MAAA,KAAA,CAAA,YAAA;AACA,KAvBA;;AAyBA;;;AAGA,IAAA,oBA5BA,kCA4BA;AACA,WAAA,aAAA;AACA,KA9BA;;AA+BA;;;AAGA,IAAA,qBAlCA,mCAkCA;AACA,WAAA,aAAA;AACA,KApCA;;AAsCA;;;;;AAKA,IAAA,WA3CA,yBA2CA;AACA,UAAA,CAAA,KAAA,eAAA,CAAA,KAAA,IAAA,CAAA,EAAA;AACA,aAAA,YAAA,CAAA;AACA,UAAA,IAAA,EAAA,KAAA;AADA,SAAA;AAGA;AACA;AAjDA,KAmDA,UAAA,CAAA,MAAA,EAAA,CACA,cADA,CAAA,CAnDA,CA/CA;AAsGA,EAAA,OAtGA,qBAsGA;AACA,SAAA,WAAA;AACA;AAxGA,CAAA","sourcesContent":["<template>\n  <div id=\"blog--post\">\n    <transition\n      name=\"fade\"\n      mode=\"out-in\"\n      appear\n      @before-enter=\"performPreProcessing\"\n      @after-enter=\"performPostProcessing\">\n      <section\n        v-if=\"post\"\n        key=\"loaded\">\n        <div class=\"body\">\n          <div class=\"heading\">\n            <!-- Typography sizes in blog posts are off by one... -->\n            <h1 class=\"blue-colored\">{{ post.title }}</h1>\n            <!-- ...so this h1 looks like an h2 -->\n            <Metadata\n              :absolute-date=\"post.publicationDate.absolute\"\n              :relative-date=\"post.publicationDate.relative\"\n              :tags=\"post.tags\"/>\n          </div>\n\n          <div class=\"content\" v-html=\"post.body\" ref=\"content\"></div>\n\n          <p class=\"footer secondary-colored\">\n            Permalink to <a :href=\"post.portfolioUrl\">this post</a>.\n          </p>\n        </div>\n      </section>\n\n      <section\n        v-else\n        key=\"loading\"\n        class=\"centered\">\n        <Spinner/>\n      </section>\n    </transition>\n  </div>\n</template>\n\n<script>\n  import prism from 'prismjs'\n  import { mapActions, mapGetters } from 'vuex'\n\n  import Spinner from '@/components/blog/spinner/Spinner'\n  import Metadata from '@/components/blog/metadata/Metadata'\n\n  import descriptions from '@/data/descriptions.json'\n\n  /**\n   * This is one blog post. It contains the complete content from the post.\n   */\n  export default {\n    name: 'Post',\n    metaInfo () {\n      const post = this.post\n      return {\n        title: post ? post.title : 'Blog post',\n        meta: ['description', 'og:description'].map(name => ({\n          name,\n          content: descriptions.blog\n        }))\n      }\n    },\n    components: {\n      Spinner,\n      Metadata\n    },\n    props: {\n      /**\n       * _the slug of the post to display_\n       */\n      slug: {\n        type: String,\n        required: true\n      }\n    },\n    computed: {\n      post () {\n        return this.contentWithSlug(this.slug)\n      },\n\n      ...mapGetters('blog', [\n        'contentWithSlug'\n      ])\n    },\n    watch: {\n      /**\n       * Reload the page and the post content when the slug changes.\n       * @param {string} to - the new value of the slug\n       * @param {string} from - the old value of the slug\n       */\n      '$route.params.slug': function (to, from) {\n        if (to !== from) { // No need to reload if nothing changes\n          // Fetch new content from the API\n          this.loadContent()\n        }\n      }\n    },\n    methods: {\n      /**\n       * Split all headings at the indices and color all indices in a slightly\n       * muted color.\n       */\n      splitHeadings () {\n        if (this.$refs.content) {\n          const headings = this.$refs.content.querySelectorAll('h2, h3, h4, h5, h6')\n          headings.forEach(heading => {\n            const text = heading.innerText\n            const html = text.replace(\n              /^([\\d.]+)/,\n              '<span class=\"index\">§$1</span>'\n            )\n            heading.innerHTML = html\n          })\n        }\n      },\n      /**\n       * Highlight code snippets using Prism.\n       */\n      highlightCode () {\n        prism.highlightAll()\n      },\n\n      /**\n       * Perform processing to be done before the content is shown.\n       */\n      performPreProcessing () {\n        this.splitHeadings()\n      },\n      /**\n       * Perform processing to be done after the content is shown.\n       */\n      performPostProcessing () {\n        this.highlightCode()\n      },\n\n      /**\n       * Hit the serverless API for the portfolio and get the HTML content of\n       * the blog. This HTML is automatically generated by Write.as from the\n       * Markdown content of the post.\n       */\n      loadContent () {\n        if (!this.contentWithSlug(this.slug)) {\n          this.fetchContent({\n            slug: this.slug\n          })\n        }\n      },\n\n      ...mapActions('blog', [\n        'fetchContent'\n      ])\n    },\n    mounted () {\n      this.loadContent()\n    }\n  }\n</script>\n\n<style scoped lang=\"scss\" src=\"./Post.scss\"/>\n"],"sourceRoot":"src/templates/blog/subpages/post"}]}